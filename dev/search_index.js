var documenterSearchIndex = {"docs":
[{"location":"submodules/SoilPlantAirContinuum/#SoilPlantAirContinuum","page":"SPAC","title":"SoilPlantAirContinuum","text":"","category":"section"},{"location":"submodules/SoilPlantAirContinuum/","page":"SPAC","title":"SPAC","text":"CurrentModule = Land.SoilPlantAirContinuum","category":"page"},{"location":"submodules/SoilPlantAirContinuum/#Types","page":"SPAC","title":"Types","text":"","category":"section"},{"location":"submodules/SoilPlantAirContinuum/","page":"SPAC","title":"SPAC","text":"SPACMono","category":"page"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.SPACMono","page":"SPAC","title":"Land.SoilPlantAirContinuum.SPACMono","text":"mutable struct SPACMono{FT}\n\nStruct that mono species SoilPlantAirContinuum system.\n\nFields\n\nopti_file::String: Input file for SPAC spectra used in wlset and soilopt\nsoil_bounds::Vector{FT} where FT<:AbstractFloat: Soil layers bounds [m]\nair_bounds::Vector{FT} where FT<:AbstractFloat: Air layers bounds [m]\nz_root::AbstractFloat: Root depth [m]\nz_canopy::AbstractFloat: Canopy maximal height [m]\nplant_hs::Union{Land.PlantHydraulics.GrassLikeOrganism{FT}, Land.PlantHydraulics.PalmLikeOrganism{FT}, Land.PlantHydraulics.TreeLikeOrganism{FT}} where FT<:AbstractFloat: Plant hydraulic system\nn_canopy::Int64: Number of canopy layers\nn_root::Int64: Number of root layers\nplant_ps::Array{Land.StomataModels.CanopyLayer{FT}, 1} where FT<:AbstractFloat: Plant photosynthesis systems\nba::AbstractFloat: Basal area [m²]\nga::AbstractFloat: Ground area [m²]\nla::AbstractFloat: Leaf area [m²]\nenvirs::Array{Land.Photosynthesis.AirLayer{FT}, 1} where FT<:AbstractFloat: Air layers\nwind_z0::AbstractFloat: Aerodynamic roughness [m]\nwind_d::AbstractFloat: Zero plane displacement [m]\nwind_zs::Vector{FT} where FT<:AbstractFloat: Mean layer height [m]\nwinds::Vector{FT} where FT<:AbstractFloat: Wind speed per layer [m s⁻¹]\nmswc::Vector{FT} where FT<:AbstractFloat: Maximal soil water content\nswc::Vector{FT} where FT<:AbstractFloat: Current soil water content\np_soil::Vector{FT} where FT<:AbstractFloat: Array of soil matric potential [MPa]\nh_soil::AbstractFloat: Maximal soil depth [m]\nlatitude::AbstractFloat: Latitude [°]\nlongitude::AbstractFloat: Longitude [°]\nelevation::AbstractFloat: Elevation [m]\nphoto_set::Union{Land.Photosynthesis.C3ParaSet{FT}, Land.Photosynthesis.C4ParaSet{FT}} where FT<:AbstractFloat: Photosynthesis parameter set\nstomata_model::Union{Land.StomataModels.EmpiricalStomatalModel{FT}, Land.StomataModels.OptimizationStomatalModel{FT}} where FT<:AbstractFloat: Stomatal behavior scheme\nangles::Land.CanopyLayers.SolarAngles{FT} where FT<:AbstractFloat: Solar angle container\ncanopy_rt::Land.CanopyLayers.Canopy4RT: Canopy4RT container\nwl_set::Land.CanopyLayers.WaveLengths{FT} where FT<:AbstractFloat: Wave length container\nrt_dim::Land.CanopyLayers.RTDimensions: RT dimensions\ncan_rad::Land.CanopyLayers.CanopyRads{FT} where FT<:AbstractFloat: CanopyRads container\ncan_opt::Land.CanopyLayers.CanopyOpticals{FT} where FT<:AbstractFloat: CanopyOpticals container\nleaves_rt::Array{Land.CanopyLayers.LeafBios{FT}, 1} where FT<:AbstractFloat: Array of LeafBios container\nsoil_opt::Land.CanopyLayers.SoilOpticals{FT} where FT<:AbstractFloat: SoilOpticals container\nin_rad::Land.CanopyLayers.IncomingRadiation{FT} where FT<:AbstractFloat: Incoming radiation container\nrt_con::Land.CanopyLayers.RTCache{FT} where FT<:AbstractFloat: RT container\nf_SL::Vector{FT} where FT<:AbstractFloat: Container for sunlit leaf area fraction in each layer\nf_gpp::AbstractFloat: Canopy GPP per ground area\nf_npp::AbstractFloat: Canopy GPP per ground area\nf_H₂O::AbstractFloat: Canopy water flux per ground area\n\n\n\n\n\n","category":"type"},{"location":"submodules/SoilPlantAirContinuum/#Planet","page":"SPAC","title":"Planet","text":"","category":"section"},{"location":"submodules/SoilPlantAirContinuum/","page":"SPAC","title":"SPAC","text":"atmospheric_pressure_ratio\natmospheric_pressure\nppm_to_Pa\nzenith_angle","category":"page"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.atmospheric_pressure_ratio","page":"SPAC","title":"Land.SoilPlantAirContinuum.atmospheric_pressure_ratio","text":"atmospheric_pressure(h::FT)\n\nCalculate the atmospheric pressure, given\n\nh elevation in [m]\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.atmospheric_pressure","page":"SPAC","title":"Land.SoilPlantAirContinuum.atmospheric_pressure","text":"atmospheric_pressure(h::FT)\n\nCalculate the atmospheric pressure, given\n\nh elevation in [m]\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.ppm_to_Pa","page":"SPAC","title":"Land.SoilPlantAirContinuum.ppm_to_Pa","text":"ppm_to_Pa(h::FT)\n\nConvert ppm to Pa, given\n\nh elevation in [m]\n\n\n\n\n\n","category":"function"},{"location":"submodules/SoilPlantAirContinuum/#Land.SoilPlantAirContinuum.zenith_angle","page":"SPAC","title":"Land.SoilPlantAirContinuum.zenith_angle","text":"zenith_angle(\n            latd::FT,\n            decd::FT,\n            lhad::FT\n) where {FT<:AbstractFloat}\nzenith_angle(\n            latd::FT,\n            day::FT,\n            hour::FT,\n            minute::FT\n) where {FT<:AbstractFloat}\n\nCalculate the zenith angle, given\n\nlatd Latitude in degree\ndecd Declination of the Sun in degree\nlhad Local hour angle in degree\nday Day of year\nhour Hour of day\nminute Minute of hour\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#CanopyLayers","page":"CanopyLayers","title":"CanopyLayers","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"CurrentModule = Land.CanopyLayers","category":"page"},{"location":"submodules/CanopyLayers/#Structures","page":"CanopyLayers","title":"Structures","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"Canopy4RT\nCanopyOpticals\nCanopyRads\nIncomingRadiation\nLeafBios\nLeafOpticals\nRTDimensions\nSoilOpticals\nSolarAngles\nWaveLengths","category":"page"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.Canopy4RT","page":"CanopyLayers","title":"Land.CanopyLayers.Canopy4RT","text":"mutable struct Canopy4RT\n\nA canopy struct for the radiation transfer module\n\nFields\n\nnLayer::Int64: Number of canopy layers\nLAI::AbstractFloat: Leaf Area Index\nΩ::AbstractFloat: Clumping factor\nclump_a::AbstractFloat: Structure factor a\nclump_b::AbstractFloat: Structure factor b\nLIDFa::AbstractFloat: Leaf Inclination\nLIDFb::AbstractFloat: Variation in leaf inclination\nhot::AbstractFloat: HotSpot parameter (still need to check!)\nz0m::AbstractFloat: Canopy roughness [m]\nz0h::AbstractFloat: Tree roughtnes [m]\nd::AbstractFloat: Canopy displacement height [m]\nCd::AbstractFloat: m/sqrt(s) turbulent transfer coefficient\nlitab::Vector{FT} where FT<:AbstractFloat: List of mean inclination angles [°]\nlitab_bnd::Matrix{FT} where FT<:AbstractFloat: List of inclination angle boundaries [°]\nlazitab::Vector{FT} where FT<:AbstractFloat: List of mean azimuth angles [°]\ncos_ttlo::Vector{FT} where FT<:AbstractFloat: Cosine of lazitab\ncos_philo::Vector{FT} where FT<:AbstractFloat: Cosine of lazitab - raa (relative azimuth angle), update with time\ncos_ttli::Vector{FT} where FT<:AbstractFloat: Cosine of litab\nsin_ttli::Vector{FT} where FT<:AbstractFloat: Sine of litab\nvol_scatt::Vector{FT} where FT<:AbstractFloat: Cache for volome scatter function\nlidf::Vector{FT} where FT<:AbstractFloat: Inclination angles weight distribution\nxl::Vector{FT} where FT<:AbstractFloat: List of level location (level = layer + 1)\ndx::AbstractFloat: 1/nLayer\nnAzi::Int64: Number of azimuth angles\nnIncl::Int64: Number of inclination angles\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.CanopyOpticals","page":"CanopyLayers","title":"Land.CanopyLayers.CanopyOpticals","text":"mutable struct CanopyOpticals{FT}\n\nA struct for canopy optical properties\n\nFields\n\nnAzi::Int64: Number of azimuth angles\nnIncl::Int64: Number of inclination agles\nnLayer::Int64: Number of canopy layers\nnWL::Int64: Number of wave lengths\nsdb::Any: Solar -> Diffuse backscatter weight\nsdf::Any: Solar -> Diffuse forward scatter weight\ndob::Any: Diffuse -> Directional backscatter weight\ndof::Any: Diffuse -> Directional forward scatter weight\nddb::Any: Diffuse -> Diffuse backscatter weight\nddf::Any: Diffuse -> Diffuse forward scatter weight\nks::Any: Solar beam extinction coefficient weight\nko::Any: Outgoing beam extinction coefficient weight\nbf::Any: ?\nsob::Any: Weight of specular2directional backscatter coefficient\nsof::Any: Weight of specular2directional forward coefficient\nPs::Vector: Probability of directly viewing a leaf in solar direction\nPo::Vector: Probability of directly viewing a leaf in viewing direction\nPso::Vector: Bi-directional probability of directly viewing a leaf (solar->canopy->viewing)\nfs::Matrix: conversion factor fs to compute irradiance on inclined leaf\nabsfs::Matrix: abs(fs)\nabsfsfo::Matrix: abs(fs*fo)\nfsfo::Matrix: fs*fo\nfo::Matrix: conversion factor fo for angle towards observer (not sun like fs)\nabsfo::Matrix: abs(fo)\ncosΘ_l::Matrix: Cosine of leaf azimuths\ncos2Θ_l::Matrix: cos of leaf azimuth sqared\nsigb::Matrix: diffuse     backscatter scattering coefficient for diffuse  incidence\nsigf::Matrix: diffuse     forward     scattering coefficient for diffuse  incidence\nsb::Matrix: diffuse     backscatter scattering coefficient for specular incidence\nsf::Matrix: diffuse     forward     scattering coefficient for specular incidence\nvb::Matrix: directional backscatter scattering coefficient for diffuse  incidence\nvf::Matrix: directional forward     scattering coefficient for diffuse  incidence\nw::Matrix: bidirectional scattering coefficent (directional-directional)\na::Matrix: attenuation\nXsd::Matrix: Effective layer transmittance (direct->diffuse)\nXdd::Matrix: Effective layer transmittance (diffuse->diffuse)\nR_sd::Matrix: Effective layer reflectance (direct->diffuse)\nR_dd::Matrix: Effective layer reflectance (diffuse->diffuse)\nEs_::Matrix: Solar direct radiation per layer)\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.CanopyRads","page":"CanopyLayers","title":"Land.CanopyLayers.CanopyRads","text":"mutable struct CanopyRads{FT}\n\nA struct for canopy radiation information\n\nFields\n\nnAzi::Int64: Number of azimuth angles\nnIncl::Int64: Number of inclination agles\nnLayer::Int64: Number of canopy layers\nnLevel::Int64: Number of canopy levels\nnWL::Int64: Number of wave lengths\nnWLF::Int64: Number of wave lengths for SIF\nintEout::Any: Integrated TOC outgoing flux [W m⁻²]\nincomingPAR::Any: Incident spectrally integrated total PAR [mol m⁻² s⁻¹]\nincomingPAR_direct::Any: Incident spectrally integrated direct PAR [mol m⁻² s⁻¹]\nincomingPAR_diffuse::Any: Incident spectrally integrated diffuse PAR [mol m⁻² s⁻¹]\nRnSoil_diffuse::Any: Net radiation of shaded soil [W m⁻²]\nRnSoil_direct::Any: Net Short-wave radiation of sunlit soil [W m⁻²]\nRnSoil::Any: Net Short-wave radiation of soil (shaded + sunlit) [W m⁻²]\nRnSoilLW::Any: Net long-wave radiation of soil (shaded + sunlit) [W m⁻²]\nabsPAR_shade::Vector: Net PAR of shaded leaves [mol m⁻² s⁻¹]\nabsPAR_shadeCab::Vector: Net PAR by Cab+Car of shaded leaves [moles m⁻² s⁻¹]\nintNetSW_sunlit::Vector: Spectrally integrated net absorbed direct radiation in each layer per leaf area [W m⁻²]\nintNetSW_shade::Vector: Spectrally integrated net absorbed diffuse radiation in each layer per leaf area [W m⁻²]\nintNetLW_sunlit::Vector: Spectrally integrated net absorbed direct radiation in each layer per leaf area [W m⁻²]\nintNetLW_shade::Vector: Spectrally integrated net absorbed diffuse radiation in each layer per leaf area [W m⁻²]\nT_sun::Vector: Leaf temperature (sunlit) [K]\nT_shade::Vector: Leaf temperature (shaded) [K]\nϕ_shade::Vector: Fluorescence yield for shaded leaves\nH_shade::Vector: Sensible Heat flux H of shaded leaves [W m⁻²]\nLE_shade::Vector: Latent Heat flux LE of shaded leaves [W m⁻²]\nNPQ_shade::Vector: NPQ of shaded leaves\nGPP_shade::Vector: GPP of shaded leaves [μmol m⁻² s⁻¹]\ngs_shade::Vector: gs of shaded leaves [mol m⁻² s⁻¹]\nψl_shade::Vector: Leaf water potential of shaded leaves [MPa]\nCc_shade::Vector: Cc of shaded leaves [µmol/mol]\nPi_shade::Vector: internal CO₂ concentration of shaded leaves [µmol/mol]\nLo::Vector: Short-wave TOC outgoing radiance in observation direction [mW m⁻² nm⁻¹ sr⁻¹]\nEout::Vector: Short-wave TOC outgoing radiation [mW m⁻² nm⁻¹]\nalb_obs::Vector: Short-wave Albedo in viewing direction\nalb_direct::Vector: Short-wave Albedo for direct incoming radiation\nalb_diffuse::Vector: Short-wave Albedo for diffuse incoming radiation\nE_up::Matrix: Upwelling diffuse short-wave radiation within canopy [mW m⁻² nm⁻¹]\nE_down::Matrix: Downwelling diffuse short-wave radiation within canopy [mW m⁻² nm⁻¹]\nnetSW_sunlit::Matrix: Net absorbed direct radiation in each layer [mW m⁻² nm⁻¹]\nnetSW_shade::Matrix: net absorbed diffuse radiation in each layer [mW m⁻² nm⁻¹]\nabsPAR_sun::Array{FT, 3} where FT: net PAR of sunlit leaves [mol m⁻² s⁻¹]\nabsPAR_sunCab::Array{FT, 3} where FT: net PAR by Cab+Car of sunlit leaves [mol m⁻² s⁻¹]\nT_sun3D::Array{FT, 3} where FT: Leaf temperature (sunlit) [K]\nϕ_sun::Array{FT, 3} where FT: Fluorescence yield for sunlit leaves\nH_sun::Array{FT, 3} where FT: Sensible Heat flux H of sunlit leaves [W m⁻²]\nLE_sun::Array{FT, 3} where FT: Latent Heat flux LE of sunlit leaves [W m⁻²]\nNPQ_sun::Array{FT, 3} where FT: NPQ of sunlit leaves\nGPP_sun::Array{FT, 3} where FT: GPP of sunlit leaves [μmol m⁻² s⁻¹]\ngs_sun::Array{FT, 3} where FT: gs of sunlit leaves [mol m⁻² s⁻¹]\nψl_sun::Array{FT, 3} where FT: Leaf water potential of sunlit leaves [MPa]\nCc_sun::Array{FT, 3} where FT: Cc of sunlit leaves [µmol/mol]\nPi_sun::Array{FT, 3} where FT: Internal CO₂ concentration of sunlit leaves [µmol/mol]\nSIF_hemi::Vector: Hemispheric total outgoing SIF flux [mW m⁻² nm⁻¹])\nSIF_obs::Vector: Observer-direction outgoing SIF radiance (mW m⁻² nm⁻¹ sr⁻¹))\nSIF_obs_sunlit::Vector: Observer-direction outgoing SIF radiance, sunlit leaves (mW m⁻² nm⁻¹ sr⁻¹)\nSIF_obs_shaded::Vector: Observer-direction outgoing SIF radiance, shaded leaves (mW m⁻² nm⁻¹ sr⁻¹)\nSIF_obs_scattered::Vector: Observer-direction outgoing SIF radiance, scattered (mW m⁻² nm⁻¹ sr⁻¹)\nSIF_obs_soil::Vector: Observer-direction outgoing SIF radiance, soil-reflected (mW m⁻² nm⁻¹ sr⁻¹)\nSIF_sum::Vector: Total SIF sum of layer sources  [mW m⁻² nm⁻¹])\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.IncomingRadiation","page":"CanopyLayers","title":"Land.CanopyLayers.IncomingRadiation","text":"mutable struct IncomingRadiation{FT}\n\nIncoming radiation information\n\nFields\n\nopti_file::String\nE_direct::Vector: Direct incoming radiation [mW m⁻² nm⁻¹]\nE_diffuse::Vector: Diffuse incoming radiation [mW m⁻² nm⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.LeafBios","page":"CanopyLayers","title":"Land.CanopyLayers.LeafBios","text":"mutable struct LeafBios{FT}\n\nA struct of leaf biological parameters\n\nFields\n\nprescribe::Bool: Prescribe leaf reflectance and transmission\nρs::Vector: Prescribed leaf reflectance at PAR and NIR ranges\nτs::Vector: Prescribed leaf transmission at PAR and NIR ranges\nnWL::Int64: Number of wave length\nnWLE::Int64: Number of wave length for excitation\nnWLF::Int64: Number of wave length for SIF\nN::Any: Leaf structure parameter\nCab::Any: Chlorophyll a+b content [µg cm⁻²]\nCar::Any: Carotenoid content [µg cm⁻²]\nAnt::Any: Anthocynanin content [µg cm⁻²]\nCs::Any: Senescent material fraction\nCw::Any: Equivalent water thickness [cm]\nCm::Any: Dry matter content (dry leaf mass per unit area) [g cm⁻²]\nCx::Any: Fractionation between Zeaxanthin and Violaxanthin in Car (1=all Zeaxanthin) (-)\nfqe::Any: Leaf fluorescence efficiency (Fo standard)\nρ_LW::Any: Broadband thermal reflectance (-)\nτ_LW::Any: Broadband thermal transmission (-)\nρ_SW::Vector: Shortwave leaf reflectance\nτ_SW::Vector: Shortwave leaf transmission\nα_SW::Vector: Shortwave absorption\nkChlrel::Vector: Relative absorbtion by Chlorophyll+Car\nMb::Matrix: Fluorescence excitation matrix backwards\nMf::Matrix: Fluorescence excitation matrix forwards\nndub::Int64: Doubling adding layers\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.LeafOpticals","page":"CanopyLayers","title":"Land.CanopyLayers.LeafOpticals","text":"mutable struct LeafOpticals{FT}\n\nStruct for leaf optical properties\n\nFields\n\nopti_file::String\nnr::Vector\nKm::Vector\nKab::Vector\nKant::Vector\nKw::Vector\nKBrown::Vector\nphi::Vector\nKcaV::Vector\nKcaZ::Vector\nKcar::Vector\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.RTDimensions","page":"CanopyLayers","title":"Land.CanopyLayers.RTDimensions","text":"mutable struct RTDimensions\n\nStruct that stores matrix dimension information\n\nFields\n\nnAzi::Int64: Number of azimuth angles\nnIncl::Int64: Number of inclination agles\nnLayer::Int64: Number of canopy layers\nnLevel::Int64: Number of canopy layer boundaries nLayer+1\nnPAR::Int64: Number of PAR wave lengths\nnWL::Int64: Number of wave lengths\nnWLE::Int64: Number of wave length for excitation\nnWLF::Int64: Number of wave lengths for SIF\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SoilOpticals","page":"CanopyLayers","title":"Land.CanopyLayers.SoilOpticals","text":"mutable struct SoilOpticals{FT}\n\nA struct of soil optical parameters\n\nFields\n\nT::Any: Soil surface temperature\ncolor::Int64: Soil color class\nhyperspectral::Bool: Whether to expand from broadband to hyperspectral\nρ_NIR::Any: Shortwave albedo for NIR\nρ_PAR::Any: Shortwave albedo for PAR\nρ_SW::Vector: Shortwave albedo that matches WL from WaveLengths\nρ_SW_SIF::Vector: Shortwave albedo that matches WLF from WaveLengths\nε_SW::Vector: Shortwave absorption that equals 1 - ρ_SW\nSW_mat_4::Matrix: Shortwave albedo matrix from 4 bands with WL from WaveLengths\nSW_mat_2::Matrix: Shortwave albedo matrix from 2 bands with WL from WaveLengths\nSW_vec_4::Vector: Shortwave albedo weight from 4 bands\nSW_vec_2::Vector: Shortwave albedo weight from 2 bands\nρ_LW::Vector: Longtwave albedo\ndry_NIR::Any: Mean value for day band 1 in NIR region\ndry_PAR::Any: Mean value for day band 1 in PAR region\nwet_NIR::Any: Mean value for day band 1 in NIR region\nwet_PAR::Any: Mean value for day band 1 in PAR region\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SolarAngles","page":"CanopyLayers","title":"Land.CanopyLayers.SolarAngles","text":"struct SolarAngles{FT}\n\nStruct for observation and solar angles\n\nFields\n\nhza::Any: Hill zenith angle [°], hill slope angle\nhaa::Any: Hill azimuth angle [°], 0 for North, 180 for south\nsaa::Any: Solar azimuth angle [°], a function of time\nsza::Any: Solar zenith angle [°], a function of lat and time\nvaa::Any: Viewing azimuth angle [°]\nvza::Any: Viewing zenith angle [°]\nraa::Any: Relative azimuth angle [°], difference between saa and vaa\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.WaveLengths","page":"CanopyLayers","title":"Land.CanopyLayers.WaveLengths","text":"mutable struct WaveLengths{FT}\n\nStruct for pre-set wave length parameters\n\nFields\n\nopti_file::String\nminwlPAR::Any: Minimal WL for PAR [nm]\nmaxwlPAR::Any: Maximal WL for PAR [nm]\nminwlNIR::Any: Minimal WL for NIR [nm]\nmaxwlNIR::Any: Maximal WL for NIR [nm]\nminwle::Any: Minimal WL for SIF excitation [nm]\nmaxwle::Any: Maximal WL for SIF excitation [nm]\nminwlf::Any: Minimal WL for SIF emission/fluorescence [nm]\nmaxwlf::Any: Maximal WL for SIF emission/fluorescence [nm]\ndWL::Vector: Differential wavelength\noptis::Land.CanopyLayers.LeafOpticals: Leaf optical parameter set\nWL::Vector: Wave length [nm]\niWLE::Vector{Int64}: Index of WLE in WL\niWLF::Vector{Int64}: Index of WLF in WL\niPAR::Vector{Int64}: index of wlPAR in WL\niPAR_700::Vector{Int64}: index of wlPAR in WL for 700 nm (regular definition)\niNIR::Vector{Int64}: index of wlNIR in WL\nWLE::Vector: excitation wave length [nm]\nWLF::Vector: Fluorescence wave length [nm]\nWL_iPAR::Vector: Wave length for PAR\ndWL_iPAR::Vector: Differential wave length for PAR\ndWL_iPAR_700::Vector: Differential wave length for PAR\ndWL_iWLE::Vector: Differential wave length for iWLE\nnPAR::Int64: Length of WL_iPAR\nnWL::Int64: Length of WL\nnWLE::Int64: length of WLE\nnWLF::Int64: length of WLF\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Caches","page":"CanopyLayers","title":"Caches","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"CFCache\nCGCache\nSFCache\nSWCache\nRTCache","category":"page"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.CFCache","page":"CanopyLayers","title":"Land.CanopyLayers.CFCache","text":"mutable struct CFCache{FT}\n\nCache to speed canopy_fluxes! by pre-allocating arrays\n\nFields\n\nabs_wave::Vector: absorbed energy from wave lengths\nabsfs_lidf::Vector: absfs' * lidf [nAzi]\nE_all::Vector: wave length energy [same as dWL]\nE_iPAR::Vector: wave length energy [same as iPAR]\nlPs::Vector: lPs [nLayer]\nkChlrel::Vector: kChlrel [same as iPAR]\nPAR_diff::Vector: diffusive PAR [same as iPAR]\nPAR_diffCab::Vector: diffusive PAR for photosynthesis [same as iPAR]\nPAR_dir::Vector: direct PAR [same as iPAR]\nPAR_dirCab::Vector: diffusive PAR for photosynthesis [same as iPAR]\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.CGCache","page":"CanopyLayers","title":"Land.CanopyLayers.CGCache","text":"mutable struct CGCache{FT}\n\nCache to speed canopy_geometry! by pre-allocating arrays\n\nFields\n\n_Co::Vector: cos_ttli .* cos(vza) dim: nIncl\n_Cs::Vector: cos_ttli .* cos(sza) dim: nIncl\n_So::Vector: sin_ttli .* sin(vza) dim: nIncl\n_Ss::Vector: sin_ttli .* sin(sza) dim: nIncl\n_1s::Matrix: maxtrix filled with 1 dim: (1, nAzi)\n_2d::Matrix: 2D array to speed up _cds and _cdo dim: (nIncl, nAzi)\n_cdo::Matrix: Co * _1s .+ _So * cosphilo' dim: (nIncl, nAzi)\n_cds::Matrix: Cs * _1s .+ _Ss * costtlo' dim: (nIncl, nAzi)\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SFCache","page":"CanopyLayers","title":"Land.CanopyLayers.SFCache","text":"mutable struct SFCache{FT}\n\nCache to speed SIF_fluxes! by pre-allocating arrays\n\nFields\n\nM⁻_sun::Vector\nM⁺_sun::Vector\nwfEs::Vector\nsfEs::Vector\nsbEs::Vector\nM⁺⁻::Vector\nM⁺⁺::Vector\nM⁻⁺::Vector\nM⁻⁻::Vector\nsun_dwl_iWlE::Vector\ntmp_dwl_iWlE::Vector\nϕ_cosΘ_lidf::Vector\nvfEplu_shade::Vector\nvbEmin_shade::Vector\nvfEplu_sun::Vector\nvbEmin_sun::Vector\nsigfEmin_shade::Vector\nsigbEmin_shade::Vector\nsigfEmin_sun::Vector\nsigbEmin_sun::Vector\nsigfEplu_shade::Vector\nsigbEplu_shade::Vector\nsigfEplu_sun::Vector\nsigbEplu_sun::Vector\nzeroB::Vector\ntmp_1d_nWlF::Vector\ntmp_1d_nLayer::Vector\ndnorm::Vector\nτ_dd::Matrix: transmission of diffusive light?\nρ_dd::Matrix: extinction of diffuse light?\nXdd::Matrix\nRdd::Matrix\nY::Matrix\nU::Matrix\nS⁻::Matrix\nS⁺::Matrix\npiLs::Matrix\npiLd::Matrix\nFsmin::Matrix\nFsplu::Matrix\nFdmin::Matrix\nFdplu::Matrix\nFemo::Matrix\nM⁺::Matrix\nM⁻::Matrix\nϕ_cosΘ::Matrix\nF⁻::Matrix\nF⁺::Matrix\nnet_diffuse::Matrix\ntmp_2d_nWlF_nLayer::Matrix\ntmp_2d_nWlF_nLayer_2::Matrix\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SWCache","page":"CanopyLayers","title":"Land.CanopyLayers.SWCache","text":"mutable struct SWCache{FT}\n\nCache to speed short_wave! by pre-allocating arrays\n\nFields\n\ndnorm::Vector: dnorm?\npiLo::Vector: pi * Lo\npiLoc::Vector: pi * Lo from canopy\npiLos::Vector: pi * Lo from soil\npiLoc2::Matrix: pi * Lo from canopy 2D matrix\nρ_dd::Matrix: extinction of diffuse light?\nρ_sd::Matrix: extinction of direct light?\nτ_dd::Matrix: transmission of diffusive light?\nτ_sd::Matrix: transmission of direct light?\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.RTCache","page":"CanopyLayers","title":"Land.CanopyLayers.RTCache","text":"mutable struct RTCache{FT}\n\nCollection of caches to speed up RT module\n\nFields\n\ncf_con::Land.CanopyLayers.CFCache: CFCache type cache\ncg_con::Land.CanopyLayers.CGCache: CGCache type cache\nsf_con::Land.CanopyLayers.SFCache: SFCache type cache\nsw_con::Land.CanopyLayers.SWCache: SWCache type cache\n\n\n\n\n\n","category":"type"},{"location":"submodules/CanopyLayers/#Initialization-of-Structures","page":"CanopyLayers","title":"Initialization of Structures","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"initialize_rt_module","category":"page"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.initialize_rt_module","page":"CanopyLayers","title":"Land.CanopyLayers.initialize_rt_module","text":"initialize_rt_module(FT; nLayer::Int = 20, LAI::Number = FT(3))\n\nInitialize the RT module and return the sturctures, given\n\nFT Floating number type\nnLayer Number of canopy layers\nLAI Leaf area index\n\nThis function initializes and returns\n\nangles SolarAngles\ncan Canopy4RT\ncan_opt CanopyOpticals\ncan_rad CanopyRads\nin_rad IncomingRadiation\nleaves Vector{LeafBios}\nrt_con RTCache\nrt_dim RTDimensions\nsoil SoilOpticals\nwls WaveLengths\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#SCOPE-Model","page":"CanopyLayers","title":"SCOPE Model","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"canopy_fluxes!\ncanopy_geometry!\ncanopy_matrices!\nclumping_factor!\ndiffusive_S\ndiffusive_S!\nfluspect!\nshort_wave!\nSIF_fluxes!\nthermal_fluxes!","category":"page"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.canopy_fluxes!","page":"CanopyLayers","title":"Land.CanopyLayers.canopy_fluxes!","text":"canopy_fluxes!(\n            can::Canopy4RT{FT},\n            can_opt::CanopyOpticals{FT},\n            can_rad::CanopyRads{FT},\n            in_rad::IncomingRadiation{FT},\n            soil::SoilOpticals{FT},\n            leaves::Vector{LeafBios{FT}},\n            wls::WaveLengths{FT},\n            rt_con::RTCache{FT}\n) where {FT<:AbstractFloat}\n\nComputes a variety of integrated fluxes from the spectrally resolved     computations in the short-wave Canopy RT (e.g. absorbed soil radiation,     absorbed direct and diffuse PAR by layer (and angles for direct), net     direct and diffuse energy balance per layer), given\n\ncan Canopy4RT type struct\ncan_opt CanopyOpticals type struct\ncan_rad CanopyRads type struct\nin_rad IncomingRadiation type struct\nsoil SoilOpticals type struct\nleaves Array of LeafBios type struct\nwls WaveLengths type struct\nrt_con RTCache type cache\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.canopy_geometry!","page":"CanopyLayers","title":"Land.CanopyLayers.canopy_geometry!","text":"canopy_geometry!(can::Canopy4RT{FT}, angles::SolarAngles{FT}, can_opt::CanopyOpticals{FT}, rt_con::RTCache{FT}) where {FT<:AbstractFloat}\n\nComputes canopy optical properties (extinction coefficients for direct and     diffuse light) based on the SAIL model. Most important input parameters are     leaf inclination and azimuth distribution functions and sun-sensor     geometry. Canopy clumping Ω is implemented as in Pinty et al (2015), given\n\ncan Canopy4RT type struct\nangles SolarAngles type struct\ncan_opt CanopyOpticals type struct\nrt_con RTCache type cache\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.canopy_matrices!","page":"CanopyLayers","title":"Land.CanopyLayers.canopy_matrices!","text":"canopy_matrices!(leaves::Vector{LeafBios{FT}}, can_opt::CanopyOpticals{FT}) where {FT<:AbstractFloat}\n\nCompute scattering coefficient matrices for direct and diffuse light given     geometry dependent overall extinction coefficients and pigment dependent     leaf reflectance and transmission (computed via fluspect). This function     has to be called before short_wave! can be used.\n\nleaves Array of LeafBios type struct\ncan_opt CanopyOpticals type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.clumping_factor!","page":"CanopyLayers","title":"Land.CanopyLayers.clumping_factor!","text":"clumping_factor!(can::Canopy4RT{FT}, angles::SolarAngles{FT}) where {FT<:AbstractFloat}\n\nCalculate the clumping factor, given\n\ncan Canopy4RT type struct\nangles SolarAngles type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.diffusive_S","page":"CanopyLayers","title":"Land.CanopyLayers.diffusive_S","text":"diffusive_S(τ_dd::Array{FT}, ρ_dd::Array{FT}, S⁻::Array{FT}, S⁺::Array{FT}, boundary_top::Array{FT}, boundary_bottom::Array{FT}, rsoil::Array{FT}) where {FT<:AbstractFloat}\n\nComputes 2-stream diffusive radiation transport (used for thermal and SIF) given:\n\nτ_dd A 2D Array with layer reflectances\nρ_dd A 2D Array with layer transmissions\nS⁻ A 2D Array with layer source terms in the downwelling direction\nS⁺ A 2D Array with layer source terms in the upwelling direction\nboundary_top A 1D array with downwelling radiation at the top (top of canopy)\nboundary_bottom A 1D array with upwnwelling radiation at the bottom (soil)\nrsoil A 1D array with soil reflectance\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.diffusive_S!","page":"CanopyLayers","title":"Land.CanopyLayers.diffusive_S!","text":"diffusive_S!(sf_con::SFCache{FT}, soil::SoilOpticals{FT}, rt_dim::RTDimensions) where {FT<:AbstractFloat}\n\nComputes 2-stream diffusive radiation transport (used for thermal and SIF),     given\n\nsf_con SFCache type cache\nsoil SoilOpticals type struct\nrt_dim RTDimensions type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.fluspect!","page":"CanopyLayers","title":"Land.CanopyLayers.fluspect!","text":"fluspect!(leaf::LeafBios{FT}, wls::WaveLengths{FT}; APAR_car::Bool = true) where {FT<:AbstractFloat}\n\nComputes leaf optical properties (reflectance and transittance) based on     pigment concentrations. Also computes Fluorescence excitation matrices.     Mostly based on PROSPECT-D for leaf reflectance/transmission and FluSpec     for fluorescence.\n\nleaf LeafBios type struct\nwls WaveLengths type struct\nAPAR_car If true, include Car absorption in APAR for photosynthesis\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.short_wave!","page":"CanopyLayers","title":"Land.CanopyLayers.short_wave!","text":"short_wave!(can::Canopy4RT{FT}, can_opt::CanopyOpticals{FT}, can_rad::CanopyRads{FT}, in_rad::IncomingRadiation{FT}, soil::SoilOpticals{FT}, rt_con::RTCache{FT}) where {FT<:AbstractFloat}\n\nSimulate the short wave radiation through the canopy, given\n\ncan Canopy4RT type struct\ncan_opt CanopyOpticals type struct\ncan_rad CanopyRads type struct\nin_rad IncomingRadiation type struct\nsoil SoilOpticals type struct\nrt_con RTCache type cache\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SIF_fluxes!","page":"CanopyLayers","title":"Land.CanopyLayers.SIF_fluxes!","text":"SIF_fluxes!(leaves::Vector{LeafBios{FT}},\n            can_opt::CanopyOpticals{FT},\n            can_rad::CanopyRads{FT},\n            can::Canopy4RT{FT},\n            soil::SoilOpticals{FT},\n            wls::WaveLengths{FT},\n            rt_con::RTCache{FT},\n            rt_dim::RTDimensions;\n            photon::Bool = true\n) where {FT<:AbstractFloat}\n\nComputes 2-stream diffusive radiation transport for SIF radiation (calls     [diffusive_S!] internally). Layer reflectance and transmission is     computed from SW optical properties, layer sources from absorbed light and     SIF efficiencies. Boundary conditions are zero SIF incoming from atmosphere     or soil.\n\nleaves Array of LeafBios type struct\ncan_opt CanopyOpticals type struct\ncan_rad CanopyRads type struct\ncan Canopy4RT type struct\nsoil SoilOpticals type struct\nwls WaveLengths type struct\nrt_con RTCache type cache\nrt_dim RTDimensions type struct\nphoton If true, use photon unit in the matrix conversion\n\n\n\n\n\nSIF_fluxes!(leaf::LeafBios{FT}, in_rad::IncomingRadiation{FT}, wls::WaveLengths{FT}, rt_con::RTCache{FT}, fqe::FT = FT(0.01); photon::Bool = true) where {FT<:AbstractFloat}\n\nLeaf level SIF, given\n\nleaf LeafBios type struct\nin_rad IncomingRadiation type struct\nwls WaveLengths type struct\nrt_con RTCache type cache\nfqe Fluorescence quantum yield (default at 1%)\nphoton If true, use photon unit in the matrix conversion\n\nNote that in_rad assumes direct light with zenith angle of 0, and a zenith     angle correction needs to be made before passing it to this function. The     up- and down-ward SIF are stored in sf_con as M⁻_sun and M⁺_sun.\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.thermal_fluxes!","page":"CanopyLayers","title":"Land.CanopyLayers.thermal_fluxes!","text":"thermal_fluxes!(\n            leaves::Vector{LeafBios{FT}},\n            can_opt::CanopyOpticals{FT},\n            can_rad::CanopyRads{FT},\n            can::Canopy4RT{FT},\n            soil::SoilOpticals{FT},\n            incLW::Array{FT},\n            wls::WaveLengths{FT}\n) where {FT<:AbstractFloat}\n\nComputes 2-stream diffusive radiation transport for thermal radiation (calls     [diffusive_S] internally). Layer reflectance and transmission is computed     from LW optical properties, layer sources from temperature and Planck law,     boundary conditions from the atmosphere and soil emissivity and     temperature. Currently only uses Stefan Boltzmann law to compute spectrally     integrated LW but can be easily adjusted to be spectrally resolved.\n\nleaves Array of LeafBios type struct\ncan_opt CanopyOpticals type struct\ncan_rad CanopyRads type struct\ncan Canopy4RT type struct\nsoil SoilOpticals type struct\nincLW A 1D array with incoming long-wave radiation\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Indicies","page":"CanopyLayers","title":"Indicies","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"BLUE\nEVI\nEVI2\nLSWI\nNDVI\nNIR\nNIRv\nRED\nREF_WL\nSIF_740\nSIF_757\nSIF_771\nSIF_WL\nSWIR","category":"page"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.BLUE","page":"CanopyLayers","title":"Land.CanopyLayers.BLUE","text":"BLUE(can_rad::CanopyRads{FT}, wls::WaveLengths{FT}) where {FT<:AbstractFloat}\n\nReturn the BLUE @ 469 nm, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.EVI","page":"CanopyLayers","title":"Land.CanopyLayers.EVI","text":"EVI(can_rad::CanopyRads{FT},wls::WaveLengths{FT}) where {FT<:AbstractFloat}\n\nReturn the EVI, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.EVI2","page":"CanopyLayers","title":"Land.CanopyLayers.EVI2","text":"EVI2(can_rad::CanopyRads{FT}, wls::WaveLengths{FT}) where {FT<:AbstractFloat}\n\nReturn the EVI2, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.LSWI","page":"CanopyLayers","title":"Land.CanopyLayers.LSWI","text":"LSWI(can_rad::CanopyRads{FT}, wls::WaveLengths{FT}) where {FT<:AbstractFloat}\n\nReturn the LSWI, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.NDVI","page":"CanopyLayers","title":"Land.CanopyLayers.NDVI","text":"NDVI(can_rad::CanopyRads{FT}, wls::WaveLengths{FT}) where {FT<:AbstractFloat}\n\nReturn the NDVI, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.NIR","page":"CanopyLayers","title":"Land.CanopyLayers.NIR","text":"NIR(can_rad::CanopyRads{FT}, wls::WaveLengths{FT}) where {FT<:AbstractFloat}\n\nReturn the NIR @ 858.5 nm, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.NIRv","page":"CanopyLayers","title":"Land.CanopyLayers.NIRv","text":"NIRv(can_rad::CanopyRads{FT}, wls::WaveLengths{FT}) where {FT<:AbstractFloat}\n\nReturn the NIRv, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.RED","page":"CanopyLayers","title":"Land.CanopyLayers.RED","text":"RED(can_rad::CanopyRads{FT}, wls::WaveLengths{FT}) where {FT<:AbstractFloat}\n\nReturn the RED @ 645 nm, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.REF_WL","page":"CanopyLayers","title":"Land.CanopyLayers.REF_WL","text":"REF_WL(can_rad::CanopyRads{FT}, wls::WaveLengths{FT}, twl::FT) where {FT<:AbstractFloat}\n\nReturn the Reflectance, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\ntwl Target wave length in nm\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SIF_740","page":"CanopyLayers","title":"Land.CanopyLayers.SIF_740","text":"SIF_740(can_rad::CanopyRads{FT}, wls::WaveLengths{FT}) where {FT<:AbstractFloat}\n\nReturn the SIF @ 740 nm, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SIF_757","page":"CanopyLayers","title":"Land.CanopyLayers.SIF_757","text":"SIF_757(can_rad::CanopyRads{FT}, wls::WaveLengths{FT}; oco::Int = 2) where {FT<:AbstractFloat}\n\nReturn the SIF @ 758.68 (OCO2) or 758.77 (OCO3) nm, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\noco Integer to indentify OCO2 or OCO3\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SIF_771","page":"CanopyLayers","title":"Land.CanopyLayers.SIF_771","text":"SIF_771(can_rad::CanopyRads{FT}, wls::WaveLengths{FT}; oco::Int = 2) where {FT<:AbstractFloat}\n\nReturn the SIF @ 769.94 (OCO2) or 770.005 (OCO3) nm, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\noco Integer to indentify OCO2 or OCO3\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SIF_WL","page":"CanopyLayers","title":"Land.CanopyLayers.SIF_WL","text":"SIF_WL(can_rad::CanopyRads{FT}, wls::WaveLengths{FT}, twl::FT) where {FT<:AbstractFloat}\n\nReturn the SIF, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\ntwl Target SIF wave length in nm\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.SWIR","page":"CanopyLayers","title":"Land.CanopyLayers.SWIR","text":"SWIR(can_rad::CanopyRads{FT}, wls::WaveLengths{FT}) where {FT<:AbstractFloat}\n\nReturn the SWIR @ 2130 nm, given\n\ncan_rad CanopyRads type struct\nwls WaveLengths type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Utils","page":"CanopyLayers","title":"Utils","text":"","category":"section"},{"location":"submodules/CanopyLayers/","page":"CanopyLayers","title":"CanopyLayers","text":"calctav\ndcum\ndladgen\ne2phot\ne2phot!\npsofunction\nvolscatt!","category":"page"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.calctav","page":"CanopyLayers","title":"Land.CanopyLayers.calctav","text":"calctav(α::FT, nr::FT) where {FT<:AbstractFloat}\n\nComputes transmission of isotropic radiation across an interface between two     dielectrics (Stern F., 1964; Allen W.A., 1973)). From calctav.m in     PROSPECT-D\n\nα angle of incidence\nnr Index of refraction\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.dcum","page":"CanopyLayers","title":"Land.CanopyLayers.dcum","text":"dcum(a::FT, b::FT, t::FT) where {FT<:AbstractFloat}\n\nTODO Add function description\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.dladgen","page":"CanopyLayers","title":"Land.CanopyLayers.dladgen","text":"dladgen(a::FT, b::FT, litab_bnd::Matrix{FT}) where {FT<:AbstractFloat}\n\nTODO Calculate the freqency of WHAT?\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.e2phot","page":"CanopyLayers","title":"Land.CanopyLayers.e2phot","text":"e2phot(λ::Array{FT}, E::Array{FT}) where {FT<:AbstractFloat}\n\nCalculates the number of moles of photons, given\n\nλ An array of wave length in [nm], converted to [m] by _FAC\nE Joules of energy\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.e2phot!","page":"CanopyLayers","title":"Land.CanopyLayers.e2phot!","text":"e2phot!(λ::Vector{FT}, E::Vector{FT}, cache::Vector{FT}) where {FT<:AbstractFloat}\n\nCalculates the number of moles of photons, given\n\nλ An array of wave length in [nm], converted to [m] by _FAC\nE Joules of energy\ncache Cache to avoid memory allocations\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.psofunction","page":"CanopyLayers","title":"Land.CanopyLayers.psofunction","text":"psofunction(K::FT, k::FT, Ω::FT, LAI::FT, q::FT, dso::FT, xl::FT) where {FT<:AbstractFloat}\n\nTODO explain the variables\n\nReturn the probability of observing a sunlit leaf at depth xl (pso, see eq     31 in vdT 2009), given\n\nxl Leaf depth in the canopy\n\n\n\n\n\n","category":"function"},{"location":"submodules/CanopyLayers/#Land.CanopyLayers.volscatt!","page":"CanopyLayers","title":"Land.CanopyLayers.volscatt!","text":"volscatt!(cache::Vector{FT}, sza::FT, vza::FT, raa::FT, ttl::FT) where {FT<:AbstractFloat}\n\nCalculate interception parameters (chi_s and chi_s) and leaf reflectance     multiplier (frho) and transmittance multiplier (ftau), given\n\ncache Array cache for results\nsza Solar zenith angle\nvza Viewing zenith angle\nraa Relative azimuth angle\nttl Leaf inclination angle\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/#StomtaModels-API","page":"StomataModels","title":"StomtaModels API","text":"","category":"section"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"CurrentModule = Land.StomataModels","category":"page"},{"location":"submodules/StomataModels/#Stomatal-model-schemes","page":"StomataModels","title":"Stomatal model schemes","text":"","category":"section"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"The StomataModels module relies mainly on Photosynthesis and PlantHydraulics     modules to predict stomatal behavior from plant physiology. This module has     both empirical and optimal stomatal models. These stomatal models are     abstractized to an abstract AbstractStomatalModel, which further     has subtypes EmpiricalStomatalModel and     OptimizationStomatalModel.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"AbstractStomatalModel\nEmpiricalStomatalModel\nOptimizationStomatalModel","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.AbstractStomatalModel","page":"StomataModels","title":"Land.StomataModels.AbstractStomatalModel","text":"type AbstractStomatalModel\n\nHierarchy of the AbstractStomatalModel:\n\nEmpiricalStomatalModel\nOptimizationStomatalModel\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.EmpiricalStomatalModel","page":"StomataModels","title":"Land.StomataModels.EmpiricalStomatalModel","text":"type EmpiricalStomatalModel\n\nHierarchy of the EmpiricalStomatalModel:\n\nESMBallBerry\nESMGentine\nESMLeuning\nESMMedlyn\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.OptimizationStomatalModel","page":"StomataModels","title":"Land.StomataModels.OptimizationStomatalModel","text":"type OptimizationStomatalModel\n\nHierarchy of the OptimizationStomatalModel:\n\nOSMEller\nOSMSperry\nOSMWang\nOSMWAP\nOSMWAPMod\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"Currently, the StomataModels module has four empirical model schemes, and they     are","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"ESMBallBerry\nESMGentine\nESMLeuning\nESMMedlyn","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.ESMBallBerry","page":"StomataModels","title":"Land.StomataModels.ESMBallBerry","text":"struct ESMBallBerry{FT}\n\nAn empirical model parameter set type for Ball-Berry type model. The equation used for Ball-Berry type model is\n\ngs = g0 + g1  RH  dfracACs\n\nFields\n\ng0::Any: minimal stomatal conductance g0 [mol m⁻² s⁻¹]\ng1::Any: slope of conductance-photosynthesis correlation [unitless]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.ESMGentine","page":"StomataModels","title":"Land.StomataModels.ESMGentine","text":"struct ESMGentine{FT}\n\nAn empirical model parameter set type for Gentine type model. The equation used for Gentine type model is\n\ngs = g0 + g1  dfrack_leafk_max  dfracACa\n\nNote it that the Gentine model does not require for a β function to tune the     soil drought response, but the use of k_leaf also does not permit     post-drought stomatal response unless k_leaf can be recovered.\n\nFields\n\ng0::Any: minimal stomatal conductance g0 [mol m⁻² s⁻¹]\ng1::Any: slope of conductance-photosynthesis correlation [unitless]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.ESMLeuning","page":"StomataModels","title":"Land.StomataModels.ESMLeuning","text":"struct ESMLeuning{FT}\n\nAn empirical model parameter set type for Leuning type model. The equation used for Leuning type model is\n\ngs = g0 + g1  dfracACs - Γ^*  dfrac11 + dfracVPDd0\n\nFields\n\ng0::Any: minimal stomatal conductance g0 [mol m⁻² s⁻¹]\ng1::Any: slope of conductance-photosynthesis correlation [unitless]\nd0::Any: fitting parameter of d/d0 below the fraction, same unit as vpd [Pa]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.ESMMedlyn","page":"StomataModels","title":"Land.StomataModels.ESMMedlyn","text":"struct ESMMedlyn{FT}\n\nAn empirical model parameter set type for Medlyn type model. The equation used in Medlyn type model is\n\ngs = g0 + 16  left( 1 + dfracg1sqrtVPD right)  dfracACa\n\nFields\n\ng0::Any: minimal stomatal conductance g0 [mol m⁻² s⁻¹]\ng1::Any: slope of conductance-photosynthesis correlation [Pa⁽⁵⁾]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"All the empirical models rely on beta functions to make corrections over     stomatal conductance to account for the stomatal closure with drier soil.     We have the following prescribed beta function types, and they are:","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"AbstractBetaFunction","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.AbstractBetaFunction","page":"StomataModels","title":"Land.StomataModels.AbstractBetaFunction","text":"abstract type AbstractBetaFunction{FT}\n\nHierachy of AbstractBetaFunction:\n\nAbstractBetaG\nBetaGLinearKleaf\nBetaGLinearKsoil\nBetaGLinearPleaf\nBetaGLinearPsoil\nBetaGLinearSWC\nAbstractBetaV\nBetaVLinearKleaf\nBetaVLinearPleaf\nBetaVLinearPsoil\nBetaVLinearSWC\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"Some beta functions make correction over the g1 parameter as in the empitical     models, and they are:","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"AbstractBetaG\nBetaGLinearKleaf\nBetaGLinearKsoil\nBetaGLinearPleaf\nBetaGLinearPsoil\nBetaGLinearSWC","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.AbstractBetaG","page":"StomataModels","title":"Land.StomataModels.AbstractBetaG","text":"abstract type AbstractBetaG{FT}\n\nHierachy of AbstractBetaG:\n\nBetaGLinearKleaf\nBetaGLinearPleaf\nBetaGLinearPsoil\nBetaGLinearSWC\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaGLinearKleaf","page":"StomataModels","title":"Land.StomataModels.BetaGLinearKleaf","text":"struct BetaGLinearKleaf{FT}\n\nLinear β function for g1 based on leaf hydraulic conductance.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaGLinearKsoil","page":"StomataModels","title":"Land.StomataModels.BetaGLinearKsoil","text":"struct BetaGLinearKsoil{FT}\n\nLinear β function for g1 based on soil hydraulic conductance.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaGLinearPleaf","page":"StomataModels","title":"Land.StomataModels.BetaGLinearPleaf","text":"mutable struct BetaGLinearPleaf{FT}\n\nLinear β function for g1 based on soil water potential.\n\nFields\n\np_max::Any: Upper bound of Pleaf [MPa]\np_min::Any: Lower bound of Pleaf [MPa]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaGLinearPsoil","page":"StomataModels","title":"Land.StomataModels.BetaGLinearPsoil","text":"mutable struct BetaGLinearPsoil{FT}\n\nLinear β function for g1 based on soil water potential.\n\nFields\n\np_max::Any: Upper bound of Psoil [MPa]\np_min::Any: Lower bound of Psoil [MPa]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaGLinearSWC","page":"StomataModels","title":"Land.StomataModels.BetaGLinearSWC","text":"mutable struct BetaGLinearSWC{FT}\n\nLinear β function for g1 based on soil water content.\n\nFields\n\nswc_max::Any: Upper bound of SWC\nswc_min::Any: Lower bound of SWC\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"Some beta functions make correction over the photosynthetic capacity as in the     Photosynthesis module, and they are:","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"AbstractBetaV\nBetaVLinearKleaf\nBetaVLinearPleaf\nBetaVLinearPsoil\nBetaVLinearSWC","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.AbstractBetaV","page":"StomataModels","title":"Land.StomataModels.AbstractBetaV","text":"abstract type AbstractBetaV{FT}\n\nHierachy of AbstractBetaV:\n\nBetaVLinearKleaf\nBetaVLinearPleaf\nBetaVLinearPsoil\nBetaVLinearSWC\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaVLinearKleaf","page":"StomataModels","title":"Land.StomataModels.BetaVLinearKleaf","text":"struct BetaVLinearKleaf{FT}\n\nLinear β function for Vcmax based on leaf hydraulic conductance.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaVLinearPleaf","page":"StomataModels","title":"Land.StomataModels.BetaVLinearPleaf","text":"mutable struct BetaVLinearPleaf{FT}\n\nLinear β function for Vcmax based on soil water potential.\n\nFields\n\np_max::Any: Upper bound of Pleaf [MPa]\np_min::Any: Lower bound of Pleaf [MPa]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaVLinearPsoil","page":"StomataModels","title":"Land.StomataModels.BetaVLinearPsoil","text":"mutable struct BetaVLinearPsoil{FT}\n\nLinear β function for Vcmax based on soil water potential.\n\nFields\n\np_max::Any: Upper bound of Psoil [MPa]\np_min::Any: Lower bound of Psoil [MPa]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.BetaVLinearSWC","page":"StomataModels","title":"Land.StomataModels.BetaVLinearSWC","text":"mutable struct BetaVLinearSWC{FT}\n\nLinear β function for Vcmax based on soil water content.\n\nFields\n\nswc_max::Any: Upper bound of SWC\nswc_min::Any: Lower bound of SWC\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"The beta functions are generalized with","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"β_factor","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.β_factor","page":"StomataModels","title":"Land.StomataModels.β_factor","text":"β_factor(hs::LeafHydraulics{FT},\n         svc::AbstractSoilVC{FT},\n         bt::AbstractBetaFunction{FT},\n         p_leaf::FT,\n         p_soil::FT,\n         swc::FT\n) where {FT<:AbstractFloat}\n\nCalculate the β correction factor, given\n\nhs LeafHydraulics structure\nsvc Soil vulnerability curve\nbt AbstractBetaFunction type struct\np_leaf Leaf water potential [MPa]\np_soil Soil water potential [MPa]\nswc Soil water content\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"The StomataModels module also contains five optimization model schemes:","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"OSMEller\nOSMSperry\nOSMWang\nOSMWAP\nOSMWAPMod","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.OSMEller","page":"StomataModels","title":"Land.StomataModels.OSMEller","text":"struct OSMEller\n\nAn optimization model parameter set type for Eller model. The equation used for Eller model is\n\ndfracΘE = -dfracKE  dfracAK\n\nwhere K is dfracEP.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.OSMSperry","page":"StomataModels","title":"Land.StomataModels.OSMSperry","text":"struct OSMSperry\n\nAn optimization model parameter set type for Sperry model. The equation used for Sperry model is\n\ndfracΘE = -dfracKE  dfracA_maxK_max\n\nwhere K is dfracEP.\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.OSMWang","page":"StomataModels","title":"Land.StomataModels.OSMWang","text":"struct OSMWang\n\nAn optimization model parameter set type for Eller type model. The equation used for Wang model is\n\ndfracΘE = dfracAE_crit - E\n\nFields\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.OSMWAP","page":"StomataModels","title":"Land.StomataModels.OSMWAP","text":"struct OSMWAP{FT}\n\nAn optimization model parameter set type for Wolf-Anderegg-Pacala type model. The equation used for Wolf-Anderegg-Pacala model is\n\ndfracΘE = dfrac2aP + bK\n\nwhere K is ∂P/∂E.\n\nFields\n\na::Any: Quadratic equation parameter [μmol m⁻² s⁻¹ MPa⁻²]\nb::Any: Quadratic equation parameter [μmol m⁻² s⁻¹ MPa⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.OSMWAPMod","page":"StomataModels","title":"Land.StomataModels.OSMWAPMod","text":"struct OSMWAPMod{FT}\n\nAn optimization model parameter set type for Wolf-Anderegg-Pacala type model,     modified by adding a photosynthesis component while set b and c = 0. The equation used for modified Wolf-Anderegg-Pacala model is\n\ndfracΘE = dfracaAPK\n\nwhere P is absolute value of leaf xylem pressure.\n\nFields\n\na::Any: Quadratic equation parameter [mol mol⁻¹ MPa⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#CanopyLayer","page":"StomataModels","title":"CanopyLayer","text":"","category":"section"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"The StomataModels module is designed for multi-layer canopies, and each canopy     has multiple leaves. The stomatal behaviors are modeled per layer basis,     and the layer may contain any number of leaves starting from 1.     Photosynthesis-related information is stored in CanopyLayer     struct, but be aware that the leaves have uniform photosynthetic parameters     and temperature (conductances are different in response to light     environment).","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"CanopyLayer","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.CanopyLayer","page":"StomataModels","title":"Land.StomataModels.CanopyLayer","text":"struct CanopyLayer{FT}\n\nStruct to store leaf information (multi-dimensional).\n\nFields\n\nps::Land.Photosynthesis.Leaf: leaf photosynthesis system\nps_m::Land.Photosynthesis.Leaf: Memory leaf photosynthesis system\nLA::AbstractFloat: Total leaf area [m²]\nLAI::AbstractFloat: Leaf area index in the layer\ntLAI::AbstractFloat: Total leaf area index in the layer\nAPAR_m::AbstractFloat: Memory APAR [μmol m⁻² s⁻¹]\nenvir_m::Land.Photosynthesis.AirLayer: Memory environment\nn_leaf::Int64\nH::Vector{FT} where FT<:AbstractFloat: Sensible Heat Flux [W m⁻²]\nLE::Vector{FT} where FT<:AbstractFloat: Latent Heat Flux [W m⁻²]\nRn::Vector{FT} where FT<:AbstractFloat: Net Radiation Balance [W m⁻²]\nLV::AbstractFloat: Latent Heat of evaporation [J mol⁻¹]\nT::AbstractFloat: Temperature [K]\nT_old::AbstractFloat: Old temperature [K]\nwidth::AbstractFloat: Leaf width [m]\ng_bc::Vector{FT} where FT<:AbstractFloat: Boundary layer conductance to CO₂ [mol m⁻² s⁻¹]\ng_bh::Vector{FT} where FT<:AbstractFloat: Boundary layer conductance to heat [mol m⁻² s⁻¹]\ng_bw::Vector{FT} where FT<:AbstractFloat: Boundary layer conductance to H₂O [mol m⁻² s⁻¹]\ng_lc::Vector{FT} where FT<:AbstractFloat: Leaf diffusive conductance to water CO₂ [mol m⁻² s⁻¹]\ng_lw::Vector{FT} where FT<:AbstractFloat: Leaf diffusive conductance to water H₂O [mol m⁻² s⁻¹]\ng_m::Vector{FT} where FT<:AbstractFloat: Mesophyll conductance for CO₂ [mol m⁻² s⁻¹]\ng_sc::Vector{FT} where FT<:AbstractFloat: Stomatal conductance to water CO₂ [mol m⁻² s⁻¹]\ng_sw::Vector{FT} where FT<:AbstractFloat: Stomatal conductance to water H₂O [mol m⁻² s⁻¹]\ng_ias_c::AbstractFloat: Gias correction constant\ng_ias_e::AbstractFloat: Gias correction exponent\ng_max::AbstractFloat: Maximal leaf diffusive conductance [mol m⁻² s⁻¹]\ng_max25::AbstractFloat: Maximal leaf diffusive conductance at 298.15 K [mol m⁻² s⁻¹]\ng_min::AbstractFloat: Minimal leaf diffusive conductance [mol m⁻² s⁻¹]\ng_min25::AbstractFloat: Minimal leaf diffusive conductance at 298.15 K [mol m⁻² s⁻¹]\np_i::Vector{FT} where FT<:AbstractFloat: Leaf internal CO₂ partial pressure [Pa]\np_s::Vector{FT} where FT<:AbstractFloat: Leaf surface CO₂ partial pressure [Pa]\np_sat::AbstractFloat: Leaf saturation vapor pressure [Pa]\nAc::Vector{FT} where FT<:AbstractFloat: RubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\nAj::Vector{FT} where FT<:AbstractFloat: Light limited photosynthetic rate [μmol m⁻² s⁻¹]\nAg::Vector{FT} where FT<:AbstractFloat: Gross photosynthetic rate [μmol m⁻² s⁻¹]\nAn::Vector{FT} where FT<:AbstractFloat: Net photosynthetic rate [μmol m⁻² s⁻¹]\nAp::Vector{FT} where FT<:AbstractFloat: Product limited photosynthetic rate [μmol m⁻² s⁻¹]\nJ::Vector{FT} where FT<:AbstractFloat: Electron transport [μmol m⁻² s⁻¹]\nJ_pot::Vector{FT} where FT<:AbstractFloat: Potential Electron Transport Rate [μmol m⁻² s⁻¹]\ne2c::Vector{FT} where FT<:AbstractFloat: Total efficiency, incl. photorespiration [mol CO₂ mol⁻¹ e-]\nFm′::Vector{FT} where FT<:AbstractFloat: light adapted yield (Kp=0)\nFo′::Vector{FT} where FT<:AbstractFloat: light-adapted fluorescence yield in the dark (Kp=max)\nJa::Vector{FT} where FT<:AbstractFloat: Actual electron transport rate [μmol m⁻² s⁻¹]\nNPQ::Vector{FT} where FT<:AbstractFloat: Non-Photochemical quenching\nqQ::Vector{FT} where FT<:AbstractFloat: Photochemical quenching\nqE::Vector{FT} where FT<:AbstractFloat: energy quenching\nφ::Vector{FT} where FT<:AbstractFloat: PSII yield\nφs::Vector{FT} where FT<:AbstractFloat: Steady-state (light-adapted) yield (aka Fs)\nFm::AbstractFloat: dark adapted yield (Kp=0)\nFo::AbstractFloat: dark-adapted fluorescence yield (Kp=max)\nAPAR::Vector{FT} where FT<:AbstractFloat: Absorbed photosynthetic active radiation [μmol m⁻² s⁻¹]\nLAIx::Vector{FT} where FT<:AbstractFloat: Leaf area fractions\na_max::Vector{FT} where FT<:AbstractFloat: Maximal photosynthetic rate [μmol m⁻² s⁻¹]\ne::Vector{FT} where FT<:AbstractFloat: Flow rate [mol m⁻² s⁻¹]\nec::AbstractFloat: Critical flow rate [mol m⁻² s⁻¹]\nkr_max::AbstractFloat: Maximal hydraulic conductance ratio\np_ups::AbstractFloat: Base xylem pressre [MPa]\np_old::AbstractFloat: Base xylem pressre memory [MPa]\nff::AbstractFloat: Fitness factor for nighttime stomtal conductance\nτ_esm::AbstractFloat: τ for empirical stomatal models [-], Δg/Δt = (g_ss - gsw) / τ\nτ_osm::AbstractFloat: τ for optimal stomatal models [μmol⁻¹], Δg/Δt = (∂A/∂E - ∂Θ/∂E) * τ\nτ_noc::AbstractFloat: τ for nighttime optimal stomatal models [μmol⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Stomatal-conductance","page":"StomataModels","title":"Stomatal conductance","text":"","category":"section"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"For empirical stomatal models, the stomatal conductance is computed as the     intercept of two functions: an empirical function that describe stomatal     responses to the physiological and environmental cues and an function that     follows the diffusion nature of H₂O and CO₂. The abstractized function for     the empirical correlation is","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"stomatal_conductance","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.stomatal_conductance","page":"StomataModels","title":"Land.StomataModels.stomatal_conductance","text":"stomatal_conductance(\n            model::EmpiricalStomatalModel{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT},\n            β::FT\n) where {FT<:AbstractFloat}\nstomatal_conductance(\n            model::EmpiricalStomatalModel{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            β::FT\n) where {FT<:AbstractFloat}\nstomatal_conductance(\n            model::EmpiricalStomatalModel{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            β::FT,\n            ind::Int\n) where {FT<:AbstractFloat}\n\nSteady state gsw from empirical approach given\n\nmodel EmpiricalStomatalModel type empirical model parameter set\nleaf [Leaf] type struct\ncanopyi CanopyLayer type struct\nenvir [AirLayer] type struct\nβ Correction factor over the g1 part of an empirical model\nind Nth leaf in the canopy layer\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"For optimization stomatal models, the stomatal conductance is computed as the     point where the marginal carbon gains equals the marginal carbon risk. The     marginal carbon gain and risk are generally numerically computed by     marginally increasing transpiration rate.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"This module uses ConstrainedRootSolver module to iterate through the two     functions to find the solution. The aim is to find the stomatal conductance     when the solution_diff! function equals 0. The     solution_diff! returns the diference between real and     model-predicted conductances for empirical stomatal models, and the     difference between marginal carbon gain and risk for optimization stomatal     models.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"solution_diff!","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.solution_diff!","page":"StomataModels","title":"Land.StomataModels.solution_diff!","text":"solution_diff!(x::FT,\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            svc::AbstractSoilVC{FT},\n            psoil::FT,\n            swc::FT,\n            envir::AirLayer{FT},\n            sm::OptimizationStomatalModel{FT},\n            bt::AbstractBetaFunction{FT},\n            mode::GlcDrive,\n            ind::Int\n) where {FT<:AbstractFloat}\nsolution_diff!(x::FT,\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            envir::AirLayer{FT},\n            sm::AbstractStomatalModel{FT},\n            mode::AbstractDrive,\n            ind::Int\n) where {FT<:AbstractFloat}\n\nCalculate the difference to be minimized for a given\n\nx Assumed leaf diffusive conductance or stomatal conductance, depending on mode\nphoto_set[C3ParaSet] or [C4ParaSet] type parameter set\ncanopyiCanopyLayer type struct\nhs Leaf hydraulic system\npsoil Soil water potential [MPa]\nswc Soil water content\nenvir[AirLayer] type struct\nsm EmpiricalStomatalModel or OptimizationStomatalModel\nbt AbstractBetaFunction type struct\nmode GlcDrive or GswDrive mode\nind Nth leaf in the canopy layer\n\nThe former function works for all empirical stomatal models, and the latter     works for all optimization based models.\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"In the solution_diff! function, leaf photosynthetic rates is modeled     using gas_exchange!, which calculates the gas exchange     rates from a known total leaf diffusive conductance using     GlcDrive mode.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"AbstractDrive\nGlcDrive\nGswDrive","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.AbstractDrive","page":"StomataModels","title":"Land.StomataModels.AbstractDrive","text":"abstract type AbstractDrive\n\nHierarchy of AbstractDrive\n\nGlcDrive\nGswDrive\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.GlcDrive","page":"StomataModels","title":"Land.StomataModels.GlcDrive","text":"struct GlcDrive\n\nGas exchange update is driven by changes in total leaf diffusive conductance to     CO₂\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/#Land.StomataModels.GswDrive","page":"StomataModels","title":"Land.StomataModels.GswDrive","text":"struct GswDrive\n\nGas exchange update is driven by changes in stomtal conductance to H₂O\n\n\n\n\n\n","category":"type"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"However, these functions do not force stomatal conductance to stay in its     ranges. For example, the stomatal conductance solution is set to be zero if     light is lower than the compensation point. In this case, the     solution_diff! function has to be used along with a control     function to guarantee realistic stomatal conductance.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"gsw_control!","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.gsw_control!","page":"StomataModels","title":"Land.StomataModels.gsw_control!","text":"gsw_control!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            ind::Int\n) where {FT<:AbstractFloat}\ngsw_control!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nmake sure g_sw is in its physiological range limited by diffusion, given\n\nphoto_set [C3ParaSet] or [C4ParaSet] type parameter set\ncanopyi CanopyLayer type struct\nenvir [AirLayer] type struct\nind Nth leaf\n\nNote that this function is meant to use jointly with gas_exchange! when     computing optimal stomtal conductance.\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"To facilitate the use of the StomataModels module, an abstractized function is     provided for conveniently obtaining stomatal conductance from given     environmental conditions.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"gas_exchange!","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.gas_exchange!","page":"StomataModels","title":"Land.StomataModels.gas_exchange!","text":"gas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            psoil::FT,\n            swc::FT,\n            envir::AirLayer{FT},\n            sm::EmpiricalStomatalModel{FT},\n            bt::AbstractBetaFunction{FT}\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            psoil::FT,\n            swc::FT,\n            envir::AirLayer{FT},\n            sm::EmpiricalStomatalModel{FT},\n            bt::AbstractBetaFunction{FT},\n            ind::Int\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            envir::AirLayer{FT},\n            sm::AbstractStomatalModel{FT}\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            envir::AirLayer{FT},\n            sm::AbstractStomatalModel{FT},\n            ind::Int\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::TreeSimple{FT},\n            envir::AirLayer{FT},\n            sm::OSMWang{FT}\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            drive::GlcDrive,\n            ind::Int,\n            glc::FT\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            drive::GlcDrive,\n            ind::Int\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            drive::GlcDrive\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            drive::GswDrive,\n            ind::Int,\n            gsw::FT\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            drive::GswDrive,\n            ind::Int\n) where {FT<:AbstractFloat}\ngas_exchange!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            drive::GswDrive\n) where {FT<:AbstractFloat}\n\nCalculate steady state gas exchange rates, given\n\nphoto_set [C3ParaSet] or [C4ParaSet] type parameter set\ncanopyi CanopyLayer type struct\nhs Leaf hydraulic system or TreeSimple hydraulic organism\nenvir [AirLayer] type struct\nsm EmpiricalStomatalModel or OptimizationStomatalModel\nbt AbstractBetaFunction type struct\nind Nth leaf in canopyi\ndrive GlcDrive or GswDrive drive mode\nglc Given leaf diffusive conductance to CO₂\ngsw Given stomatal conductance to H₂O\n\nNote 1: When there is no drive mode in the parameter list, the function     calculates the steady state stomatal conductance first, and then the gas     exchange rates.\n\nNote 2: When using GlcDrive mode, gas exchange rates are computed using the     given glc. However, this option does not make the gsw control, so it is     not guaranteed that gsw is within the physiological range. Thus, gsw     control should be made outside this function. This option is supposed to be     used in the optimal stomatl conductance models only, because optimal     conductance can be outside the physiological stomatal conductance range.     Thus, using this option for other purposes need to be cautious. In this     case, it is recommended to use the GswDrive mode.\n\nNote 3: When using GswDrive mode, gas exchange rates are computed using the     given gsw. Moreover, gsw control so that gsw is within the     physiological range.\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"To speed up the calculations, leaf physiological parameters are updated only     if the environmental conditions changes. For example, PAR (photosyntheis     active radiation) is constant when we iterate solution_diff!, and     the electron transport is only updated once. Similar to the cases of     leaf temperature and soil moisture. This kind of functions used in the     present module are","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"update_leaf_TP!\nupdate_leaf_AK!","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.update_leaf_TP!","page":"StomataModels","title":"Land.StomataModels.update_leaf_TP!","text":"update_leaf_TP!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            canopyi::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nUpdate leaf physiological parameters if temperature or pressure changes in the daytime, given\n\nphoto_set [C3ParaSet] or [C4ParaSet] type parameter set\ncanopyi CanopyLayer type struct\nhs Leaf hydraulic system\nenvir [AirLayer] type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/#Land.StomataModels.update_leaf_AK!","page":"StomataModels","title":"Land.StomataModels.update_leaf_AK!","text":"update_leaf_AK!(\n        photo_set::AbstractPhotoModelParaSet{FT},\n        canopyi::CanopyLayer{FT},\n        hs::LeafHydraulics{FT},\n        envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nUpdate leaf maximal A and K for Sperry model, given\n\nphoto_set [C3ParaSet] or [C4ParaSet] type parameter set\ncanopyi CanopyLayer type struct\nenvir [AirLayer] type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"I'd like to emphasize it here that the gas_exchange!     function only applies to the case of constant leaf temperature because     leaf energy budget is not calculated, and thus     gas_exchange! is only applicable to (1) known leaf     temperature, and (2) prognostically modeling the non-steady state stomatal     behaviors. As to the steady state case, leaf energy budget has to be     considered. For the prognotic stomatal conductance, it is recommended to     use gas_exchange! function at GswDrive mode.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"Note it here that stomtal conductance is controlled in this function, and thus     no additional control like gsw_control! is required if     gas_exchange! is used.","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"Other functions","category":"page"},{"location":"submodules/StomataModels/","page":"StomataModels","title":"StomataModels","text":"dRdE\ndTdE\ndΘdE\nnocturnal_diff!\nprognostic_gsw!","category":"page"},{"location":"submodules/StomataModels/#Land.StomataModels.dRdE","page":"StomataModels","title":"Land.StomataModels.dRdE","text":"dRdE(photo_set::AbstractPhotoModelParaSet{FT},\n     clayer::CanopyLayer{FT},\n     envir::AirLayer{FT},\n     LAI::FT\n) where {FT<:AbstractFloat}\n\nCalculate the marginal decrease of respiration rate, given\n\nphoto_set AbstractPhotoModelParaSet type struct\nclayer CanopyLayer type of struct\nenvir AirLayer type struct\nLAI Total leaf area index of whole canopy\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/#Land.StomataModels.dTdE","page":"StomataModels","title":"Land.StomataModels.dTdE","text":"dTdE(clayer::CanopyLayer{FT},\n     envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nCalculate the margian decrease in leaf temperature, given\n\nclayer CanopyLayer type of struct\nenvir AirLayer type struct\nLAI Total leaf area index of whole canopy\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/#Land.StomataModels.dΘdE","page":"StomataModels","title":"Land.StomataModels.dΘdE","text":"dΘdE(photo_set::AbstractPhotoModelParaSet{FT},\n     clayer::CanopyLayer{FT},\n     sm::OSMWang{FT}(),\n     g_sw::FT\n) where {FT<:AbstractFloat}\n\nCalculate the margian carbon cost related to nighttime transpiration, given\n\nphoto_set AbstractPhotoModelParaSet type struct\nclayer CanopyLayer type of struct\nsm OSMWang type stomatal model\ng_sw Given leaf level stomatal conductance\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/#Land.StomataModels.nocturnal_diff!","page":"StomataModels","title":"Land.StomataModels.nocturnal_diff!","text":"nocturnal_diff!(\n            x::FT,\n            photo_set::AbstractPhotoModelParaSet{FT},\n            clayer::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            sm::OSMWang{FT}()\n) where {FT<:AbstractFloat}\n\nCalculate the difference between marginal gain and risk of nighttime     transpiration, given\n\nx Given leaf level stomatal conductance\nphoto_set AbstractPhotoModelParaSet type struct\nclayer CanopyLayer type of struct\nenvir AirLayer type struct\nsm OSMWang type stomatal model\n\n\n\n\n\n","category":"function"},{"location":"submodules/StomataModels/#Land.StomataModels.prognostic_gsw!","page":"StomataModels","title":"Land.StomataModels.prognostic_gsw!","text":"prognostic_gsw!(\n            clayer::CanopyLayer{FT},\n            envir::AirLayer{FT},\n            sm::EmpiricalStomatalModel{FT},\n            β::FT,\n            Δt::FT\n) where {FT<:AbstractFloat}\nprognostic_gsw!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            clayer::CanopyLayer{FT},\n            hs::LeafHydraulics{FT},\n            envir::AirLayer{FT},\n            sm::OSMWang{FT},\n            Δt::FT\n) where {FT<:AbstractFloat}\n\nUpdate g_sw prognostically, given\n\nclayer A CanopyLayer type struct\nenvir AirLayer type environmental conditions\nsm EmpiricalStomatalModel or OSMWang type stomatal model\nβ Tune factor to stomatal g1. 1 for AbstractBetaV mode\nΔt Time interval for prognostic stomatal conductance\nphoto_set AbstractPhotoModelParaSet type photosynthesis model, currently   supports OSMWang model only\nhs Leaf hydraulic system\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#API","page":"PlantHydraulics","title":"API","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"CurrentModule = Land.PlantHydraulics","category":"page"},{"location":"submodules/PlantHydraulics/#Plant-Hydraulic-System","page":"PlantHydraulics","title":"Plant Hydraulic System","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"The PlantHydraulics module provides two levels of hydraulics system:     organ-level and plant-level. The organ-level hydraulic systems include     Leaf, Root, and Stem (trunk and branch). The plant-level hydraulic system     is can be any combination of the three organs (custimized definition may     apply).","category":"page"},{"location":"submodules/PlantHydraulics/#Leaf,-Root,-and-Stem-organs","page":"PlantHydraulics","title":"Leaf, Root, and Stem organs","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Plant hydraulics is segmented to three organ-level systems/structs     (LeafHydraulics, RootHydraulics, and     StemHydraulics) subject to an Abstract type     (AbstractHydraulicOrgan). The major differences among the three     structs are","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"LeafHydraulics has an extra-xylary component\nRootHydraulics has a rhizosphere component\nRootHydraulics and StemHydraulics have a gravity component","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"See the documentation for each struct for more details:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"AbstractHydraulicOrgan\nLeafHydraulics\nRootHydraulics\nStemHydraulics","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.AbstractHydraulicOrgan","page":"PlantHydraulics","title":"Land.PlantHydraulics.AbstractHydraulicOrgan","text":"abstract type AbstractHydraulicOrgan{FT}\n\nHierarchy of AbstractHydraulicOrgan\n\nLeafHydraulics\nRootHydraulics\nStemHydraulics\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.LeafHydraulics","page":"PlantHydraulics","title":"Land.PlantHydraulics.LeafHydraulics","text":"mutable struct LeafHydraulics{FT}\n\nA struct that contains leaf hydraulics information.\n\nFields\n\nN::Int64\narea::Any: Leaf area [m²]\nk_ox::Any: Maximal extra-xylary hydraulic conductance [mol s⁻¹ MPa⁻¹ m⁻²]\nk_sla::Any: Maximal leaf hydraulic conductance per leaf area [mol s⁻¹ MPa⁻¹ m⁻²]\nvc::Land.PlantHydraulics.AbstractXylemVC{FT} where FT: Vulnerability curve\np_crt::Any: Critical xylem pressure [MPa]\nflow::Any: Flow rate in the xylem [mol s⁻¹]\np_dos::Any: Leaf xylem water pressure at the downstream end of leaf xylem [MPa]\np_leaf::Any: Leaf end water pressure at air-water interface [MPa]\np_ups::Any: Leaf xylem water pressure at the leaf base (upstream) [MPa]\nk_element::Vector: List of leaf k_max per element [mol s⁻¹ MPa⁻¹ m⁻²]\nk_history::Vector: List of leaf kr history per element\np_element::Vector: List of xylem water pressure [MPa]\np_history::Vector: List of xylem water pressure history (normalized to 298.15 K) [MPa]\nf_st::Any: Relative surface tension\nf_vis::Any: Relative viscosity\nT_old::Any: Temperature memory [K]\nT_sap::Any: Upstream sap temperature [K]\npv::Land.PlantHydraulics.AbstractCapacity{FT} where FT: Pressure volume curve for storage\np_storage::Any: Pressure of storage\nv_maximum::Any: Total capaciatance at Ψ = 0 [mol m⁻²]\nv_storage::Any: Current capaciatance at Ψ_leaf [mol m⁻²]\nq_in::Any: Flow rate into the tissue (used for non-steady state) [mol m⁻² s⁻¹]\nq_out::Any: Flow rate out of the tissue (used for non-steady state) [mol m⁻² s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.RootHydraulics","page":"PlantHydraulics","title":"Land.PlantHydraulics.RootHydraulics","text":"mutable struct RootHydraulics{FT}\n\nA struct that contains root hydraulics information.\n\nFields\n\nN::Int64\narea::Any: Root cross-section area [m²]\nk_max::Any: Maximal hydraulic conductance [mol s⁻¹ MPa⁻¹]\nk_s::Any: Maximal xylem hydraulic conductivity [mol s⁻¹ MPa⁻¹ m⁻²]\nvc::Land.PlantHydraulics.AbstractXylemVC{FT} where FT: Vulnerability curve\nΔh::Any: Root z difference [m]\nk_rhiz::Any: Rhizosphere  conductance [mol s⁻¹ MPa⁻¹]\nsh::Union{Land.PlantHydraulics.BrooksCorey{FT}, Land.PlantHydraulics.VanGenuchten{FT}} where FT: Soil hydraulics\nflow::Any: Flow rate in the xylem [mol s⁻¹]\np_dos::Any: Xylem water pressure at the downstream end of xylem [MPa]\np_rhiz::Any: Xylem-rhizosphere interface water pressure [MPa]\np_ups::Any: Soil matrix potential [MPa]\np_osm::Any: Soil osmotic potential at 298.15 K `[MPa]\nk_element::Vector: List of k_max per element [mol s⁻¹ MPa⁻¹ m⁻²]\nk_history::Vector: List of kr history per element\np_element::Vector: List of xylem water pressure [MPa]\np_gravity::Vector: List of pressure drop caused by gravity [MPa]\np_history::Vector: List of xylem water pressure history (normalized to 298.15 K) [MPa]\nf_st::Any: Relative surface tension\nf_vis::Any: Relative viscosity\nT_old::Any: Temperature memory [K]\nT_sap::Any: Upstream sap temperature [K]\npv::Land.PlantHydraulics.AbstractCapacity{FT} where FT: Pressure volume curve for storage\np_storage::Vector: Pressure of storage per element\nv_maximum::Vector: Maximal storage per element [mol]\nv_storage::Vector: Storage per element [mol]\nq_element::Vector: List of xylem water flow [mol m⁻²]\nq_buffer::Vector: List of buffer water flow [mol m⁻²]\nq_diff::Vector: List of diiferntial water flow [mol m⁻²]\nq_in::Any: Flow rate into the tissue (used for non-steady state) [mol s⁻¹]\nq_out::Any: Flow rate out of the tissue (used for non-steady state) [mol s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.StemHydraulics","page":"PlantHydraulics","title":"Land.PlantHydraulics.StemHydraulics","text":"mutable struct StemHydraulics{FT}\n\nA struct that contains stem hydraulics information.\n\nFields\n\nN::Int64\narea::Any: Stem cross-section area [m²]\nk_max::Any: Maximal hydraulic conductance [mol s⁻¹ MPa⁻¹]\nk_s::Any: Maximal xylem hydraulic conductivity [mol s⁻¹ MPa⁻¹ m⁻²]\nvc::Land.PlantHydraulics.AbstractXylemVC{FT} where FT: Vulnerability curve\nΔh::Any: Stem height difference [m]\nflow::Any: Flow rate in the xylem [mol s⁻¹]\np_dos::Any: Xylem water pressure at the downstream end of xylem [MPa]\np_ups::Any: Xylem water pressure at the base (upstream) [MPa]\nk_element::Vector: List of k_max per element [mol s⁻¹ MPa⁻¹ m⁻²]\nk_history::Vector: List of kr history per element\np_element::Vector: List of xylem water pressure [MPa]\np_gravity::Vector: List of pressure drop caused by gravity [MPa]\np_history::Vector: List of xylem water pressure history (normalized to 298.15 K) [MPa]\nf_st::Any: Relative surface tension\nf_vis::Any: Relative viscosity\nT_old::Any: Temperature memory [K]\nT_sap::Any: Upstream sap temperature [K]\npv::Land.PlantHydraulics.AbstractCapacity{FT} where FT: Pressure volume curve for storage\np_storage::Vector: Pressure of storage per element\nv_maximum::Vector: Maximal storage per element [mol]\nv_storage::Vector: Storage per element [mol]\nq_element::Vector: List of xylem water flow [mol m⁻²]\nq_in::Any: Flow rate into the tissue (used for non-steady state) [mol s⁻¹]\nq_out::Any: Flow rate out of the tissue (used for non-steady state) [mol s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"To initialize a hydraulics system, one needs to provide the floating type, for     example:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"FT = Float32;\nhs_leaf = LeafHydraulics{FT}();\nhs_root = RootHydraulics{FT}();\nhs_stem = StemHydraulics{FT}();","category":"page"},{"location":"submodules/PlantHydraulics/#Whole-plant-organism","page":"PlantHydraulics","title":"Whole-plant organism","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Plants differ in their structures, for example, some plants have a canopy far     above the ground elevated by a trunk, some plants have a structured canopy     supported by branch systems, and some plant has no trunk at all. To     represent the structural differences, several types of plant hydraulics     systems are pre-defined, and they are GrassLikeOrganism,     PalmLikeOrganism, TreeLikeOrganism, and     TreeSimple structs subject to a AbstractPlantOrganism     type. The major difference between the HSs are","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"GrassLikeOrganism has only mutiple root and canopy layers, no trunk   or branch\nPalmLikeOrganism has multiple root layers, a trunk, and multiple   canopy layers, no branch system\nTreeLikeOrganism has multiple root layers, a trunk, and multiple   branch + canopy layers, and each branch corresponds to a canopy layer\nTreeSimple has one root, one stem, and one leaf for testing purpose","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"See the documentation for each struct for more details:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"AbstractPlantOrganism\nGrassLikeOrganism\nPalmLikeOrganism\nTreeLikeOrganism\nTreeSimple","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.AbstractPlantOrganism","page":"PlantHydraulics","title":"Land.PlantHydraulics.AbstractPlantOrganism","text":"abstract type AbstractPlantOrganism{FT}\n\nHierachy of AbstractPlantOrganism\n\nGrassLikeOrganism\nPalmLikeOrganism\nTreeLikeOrganism\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.GrassLikeOrganism","page":"PlantHydraulics","title":"Land.PlantHydraulics.GrassLikeOrganism","text":"mutable struct GrassLikeOrganism{FT}\n\nA plant hydraulic system like a grass, which contains multiple root layers, and multiple canopy layers. No trunk or branch system applies.\n\nFields\n\nn_root::Int64: Root Layers\nn_canopy::Int64: Canopy Layers\nroots::Array{Land.PlantHydraulics.RootHydraulics{FT}, 1} where FT: Roots system\nleaves::Array{Land.PlantHydraulics.LeafHydraulics{FT}, 1} where FT: Leaves\nroot_index_in_soil::Vector{Int64}: Corresponding soil layer per root layer\ncanopy_index_in_air::Vector{Int64}: Corresponding air layer per canopy layer\ncache_k::Vector: Conductances for each layer at given flow\ncache_p::Vector: Pressure for each layer at given flow\ncache_q::Vector: Flow rate\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.PalmLikeOrganism","page":"PlantHydraulics","title":"Land.PlantHydraulics.PalmLikeOrganism","text":"mutable struct PalmLikeOrganism{FT}\n\nA plant hydraulic system like a palm, which contains multiple root layers, one trunk, and multiple canopy layers. No branch system applies.\n\nFields\n\nn_root::Int64: Root Layers\nn_canopy::Int64: Canopy Layers\nroots::Array{Land.PlantHydraulics.RootHydraulics{FT}, 1} where FT: Roots system\ntrunk::Land.PlantHydraulics.StemHydraulics: Trunk\nleaves::Array{Land.PlantHydraulics.LeafHydraulics{FT}, 1} where FT: Leaves\nroot_index_in_soil::Vector{Int64}: Corresponding soil layer per root layer\ncanopy_index_in_air::Vector{Int64}: Corresponding air layer per canopy layer\ncache_k::Vector: Conductances for each layer at given flow\ncache_p::Vector: Pressure for each layer at given flow\ncache_q::Vector: Flow rate\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.TreeLikeOrganism","page":"PlantHydraulics","title":"Land.PlantHydraulics.TreeLikeOrganism","text":"mutable struct TreeLikeOrganism{FT}\n\nA plant hydraulic system like a tree, which contains multiple root layers, one trunk, and multiple branch and canopy layers.\n\nFields\n\nn_root::Int64: Root Layers\nn_canopy::Int64: Canopy Layers\nroots::Array{Land.PlantHydraulics.RootHydraulics{FT}, 1} where FT: Roots system\ntrunk::Land.PlantHydraulics.StemHydraulics: Trunk\nbranch::Array{Land.PlantHydraulics.StemHydraulics{FT}, 1} where FT: Branch system\nleaves::Array{Land.PlantHydraulics.LeafHydraulics{FT}, 1} where FT: Leaves\nroot_index_in_soil::Vector{Int64}: Corresponding soil layer per root layer\ncanopy_index_in_air::Vector{Int64}: Corresponding air layer per canopy layer\ncache_k::Vector: Conductances for each layer at given flow\ncache_p::Vector: Pressure for each layer at given flow\ncache_q::Vector: Flow rate\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.TreeSimple","page":"PlantHydraulics","title":"Land.PlantHydraulics.TreeSimple","text":"mutable struct TreeSimple{FT}\n\nA plant hydraulic system with one root, one stem, and one leaf for testing     purpose\n\nFields\n\nroot::Land.PlantHydraulics.RootHydraulics: Root\nstem::Land.PlantHydraulics.StemHydraulics: Stem\nleaf::Land.PlantHydraulics.LeafHydraulics: Leaf\nkrs::Vector: Relative hydraulic conductance\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"To ease the initialization of a plant hydraulics system, a few customized     functions are provided for quick initialization. More importantly,     modifications to each field in the struct are always allowed. The quick     functions are create_grass, create_palm, and     create_tree:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"create_grass\ncreate_palm\ncreate_tree","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.create_grass","page":"PlantHydraulics","title":"Land.PlantHydraulics.create_grass","text":"create_grass(\n            z_root::FT,\n            z_canopy::FT,\n            soil_bounds::Vector{FT},\n            air_bounds::Vector{FT}\n) where {FT<:AbstractFloat}\n\nCreate a GrassLikeOrganism, given\n\nz_root Maximal root depth (negative value)\nz_canopy Maximal canopy height (positive value)\nsoil_bounds Array of soil layer boundaries starting from 0\nair_bounds Array of air layer boundaries starting from 0\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.create_palm","page":"PlantHydraulics","title":"Land.PlantHydraulics.create_palm","text":"create_palm(z_root::FT,\n            z_trunk::FT,\n            z_canopy::FT,\n            soil_bounds::Vector{FT},\n            air_bounds::Vector{FT}\n) where {FT<:AbstractFloat}\n\nCreate a PalmLikeOrganism, given\n\nz_root Maximal root depth (negative value)\nz_trunk Maximal trunk height (positive value)\nz_canopy Maximal canopy height (positive value)\nsoil_bounds Array of soil layer boundaries starting from 0\nair_bounds Array of air layer boundaries starting from 0\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.create_tree","page":"PlantHydraulics","title":"Land.PlantHydraulics.create_tree","text":"create_tree(z_root::FT,\n            z_trunk::FT,\n            z_canopy::FT,\n            soil_bounds::Vector{FT},\n            air_bounds::Vector{FT}\n) where {FT<:AbstractFloat}\n\nCreate a TreeLikeOrganism, given\n\nz_root Maximal root depth (negative value)\nz_trunk Maximal trunk height (positive value)\nz_canopy Maximal canopy height (positive value)\nsoil_bounds Array of soil layer boundaries starting from 0\nair_bounds Array of air layer boundaries starting from 0\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"What these functions do are to determine how many root layers and branch/canopy     layers to add based on the tree information and environmental settings. To     determine number of root layers, rooting depth and the soil layer     information are required. The z_root is the maximal root depth in     negative number, and soil_bounds is the boundaries of soil layers staring     from 0. For example, for a soil_bounds of [0.0, -1.0, -2.0, -3.0, -4.0],     a z_root of -1 gives 1 root layer, and a z_root of -1.5 or -2.0 gives 2     root layers. The z_trunk, z_canopy, and air_bounds determine how many     canopy layers to add. For example, for a air_bounds of [0.0, 1.0, 2.0,     3.0, 4.0, 5.0 ... 20.0, 21.0, 22.0], a z_trunk of 5.0 z_canopy of 7.0     give 2 canopy layers, and a z_trunk of 5.5 z_canopy of 7.0 give 2     canopy layers. Also, the root_index_in_soil and canopy_index_in_air     indicate which soil or air layer the root or canopy layer corresponds with,     respectively. For instance, a index of 7 means that the canopy layer should     use the 7th air layer.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"To initialize a whole-plant hydraulic system, checkout the example below:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"FT = Float32;\ngrass = create_grass(FT(-2.1), FT(0.5), FT(8), FT[0,-1,-2,-3], collect(FT,0:1:20));\npalm  =  create_palm(FT(-2.1), FT(0.5), FT(8), FT[0,-1,-2,-3], collect(FT,0:1:20));\ntree  =  create_tree(FT(-2.1), FT(0.5), FT(8), FT[0,-1,-2,-3], collect(FT,0:1:20));\ntreet = TreeSimple{FT}();","category":"page"},{"location":"submodules/PlantHydraulics/#Xylem-hydraulic-conductance","page":"PlantHydraulics","title":"Xylem hydraulic conductance","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Plants transport water through xylem conduits (vessels in most angiosperms,     trachieds in most gymnosperms). With the ascent of sap along the hydraulic     system, water pressure in the conduits is typically negative. The negative     xylem water pressure tends to pull air from surrounding tisses or the     atmosphere into the xylem conduits, resulting in xylem cavitation. The air     bubbles in cavitated conduits block water flow, and thus results in decline     of water transport capability (measured by xylem hydraulic conductance).","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Typically, the correlation between xylem water pressure (P leq 0) and     hydraulic conductance (k) is expressed by a Weibull function for     WeibullSingle type correlation:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"k = k_textmax cdot exp left( -left( dfrac-PB right)^C right)","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"where k_textmax is the maximal hydraulic conductance, and B and C are     the Weibull parameters. This correlation is also known as vulnerability     curve (VC) to drought stress. Sometimes, plants exhibit a segmented VC, for     example, the fibers may transport water as well and are much more resistant     to drought than vessels. Thus, a dual Weibull function is presented for     WeibullDual type correlation (P leq 0):","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"k = k_textmax cdot left f_1 cdot exp left -left( dfrac-PB_1 right)^C_1 right +\n                         (1 - f_1) cdot exp left -left( dfrac-PB_2 right)^C_2 right right","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"The VC formulations are abstractized as","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"AbstractXylemVC\nWeibullDual\nWeibullSingle\nLogisticSingle\nPowerSingle","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.AbstractXylemVC","page":"PlantHydraulics","title":"Land.PlantHydraulics.AbstractXylemVC","text":"abstract type AbstractXylemVC{FT<:AbstractFloat}\n\nHierachy of AbstractXylemVC\n\nLogisticSingle\nPowerSingle\nWeibullSingle\nWeibullDual\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.WeibullDual","page":"PlantHydraulics","title":"Land.PlantHydraulics.WeibullDual","text":"mutable struct WeibullDual{FT} <: Land.PlantHydraulics.AbstractXylemVC{FT}\n\nStruct that contains dual Weibull function parameters.\n\nFields\n\nb1::Any: B of first part [MPa]\nc1::Any: C of first part\nf1::Any: F of first part\nb2::Any: B of second part [MPa]\nc2::Any: C of second part\nf2::Any: F of second part\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.WeibullSingle","page":"PlantHydraulics","title":"Land.PlantHydraulics.WeibullSingle","text":"mutable struct WeibullSingle{FT} <: Land.PlantHydraulics.AbstractXylemVC{FT}\n\nStruct that contains single Weibull function parameters.\n\nFields\n\nb::Any: B of first part [MPa]\nc::Any: C of first part\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.LogisticSingle","page":"PlantHydraulics","title":"Land.PlantHydraulics.LogisticSingle","text":"mutable struct LogisticSingle{FT} <: Land.PlantHydraulics.AbstractXylemVC{FT}\n\nStruct that contains single modified logistc function parameters.\n\nFields\n\na::Any: Multiplier to exp\nb::Any: Multiplier to P [MPa⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.PowerSingle","page":"PlantHydraulics","title":"Land.PlantHydraulics.PowerSingle","text":"mutable struct PowerSingle{FT} <: Land.PlantHydraulics.AbstractXylemVC{FT}\n\nStruct that contains single power function parameters.\n\nFields\n\na::Any: Multiplier to power function, [MPa⁻ᵇ]\nb::Any: Power to pressure\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"The function to call is","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"xylem_k_ratio","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.xylem_k_ratio","page":"PlantHydraulics","title":"Land.PlantHydraulics.xylem_k_ratio","text":"xylem_k_ratio(\n            vc::AbstractXylemVC{FT},\n            p_25::FT,\n            vis::FT\n) where {FT<:AbstractFloat}\n\nReturns the relative hydraulic conductance, given\n\nvc Xylem vulnerability curve\np Xylem pressure at 298.15 K in [MPa]\np_25 Equivalent xylem pressure at 298.15 K in [MPa]\nvis Relative viscosity. If missing, vis = 1.\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Note it here that xylem_k_ratio(vc, p) calculate the k without making     temperature corrections, but the xylem_k_ratio(vc, p_25, vis) makes     correction over the viscosity (the higher the viscosity, the lower the k).     Also, p_25 means that the pressure has been corrected to 298.15 K for     surface tension (the higher the surface tension, the more resistant the     xylem).","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Meanwhile, there is a function to call to calculate the critical pressure,     beyond which leaf will decicate. The critical pressure is calculated as the     pressure at which k is 0.001 of k_textmax for     WeibullSingle (for WeibullDual, each segment need to     reach 0.001). The functions is","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"xylem_p_crit","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.xylem_p_crit","page":"PlantHydraulics","title":"Land.PlantHydraulics.xylem_p_crit","text":"xylem_p_crit(vc::AbstractXylemVC{FT}, f_st::FT) where {FT<:AbstractFloat}\n\nReturns the relative hydraulic conductance, given\n\nvc Xylem vulnerability curve\nst Relative surface tension. If missing, vis = 1.\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Examples:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"FT = Float32;\nvc_1 = WeibullSingle{FT}();\nvc_2 = WeibullDual{FT}();\n\nk_1 = xylem_k_ratio(vc_1, -1.0);\nk_2 = xylem_k_ratio(vc_2, -1.0);\nk_3 = xylem_k_ratio(vc_1, -1.0, 1.2);\nk_4 = xylem_k_ratio(vc_2, -1.0, 1.2);","category":"page"},{"location":"submodules/PlantHydraulics/#Rhizosphere-hydraulic-conductance","page":"PlantHydraulics","title":"Rhizosphere hydraulic conductance","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"As mentioned above, there is a rhizosphere component in the root hydraulic     system, and thus one needs to compute the pressure dtop along the     rhizosphere. The soil properties are classified to BrooksCorey     and VanGenuchten types subjected to AbstractSoilVC:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"AbstractSoilVC\nBrooksCorey\nVanGenuchten","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.AbstractSoilVC","page":"PlantHydraulics","title":"Land.PlantHydraulics.AbstractSoilVC","text":"abstract type AbstractSoilVC{FT}\n\nHierachy of AbstractSoilVC:\n\nBrooksCorey\nVanGenuchten\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.BrooksCorey","page":"PlantHydraulics","title":"Land.PlantHydraulics.BrooksCorey","text":"mutable struct BrooksCorey{FT<:AbstractFloat}\n\nBrooks Corey soil parameters\n\nFields\n\nstype::String: Soil type\nb::Any: Soil b\nϕs::Any: ϕ at saturation [MPa]\nΘs::Any: Soil water content (Θ) at saturation\nΘr::Any: Residual soil water content\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.VanGenuchten","page":"PlantHydraulics","title":"Land.PlantHydraulics.VanGenuchten","text":"mutable struct VanGenuchten{FT<:AbstractFloat}\n\nVan Gunechten soil parameters\n\nFields\n\nstype::String: Soil type\nα::Any: Soil α is related to the inverse of the air entry suction, α > 0\nn::Any: Soil n is Measure of the pore-size distribution\nm::Any: Soil m = 1 - 1/n\nΘs::Any: Soil water content (Θ) at saturation\nΘr::Any: Residual soil water content\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Pre-defined parameter sets are avialble, and you may quick create a soil type     struct using create_soil_VC. Note that soil type parameters are     van Genuchten type VC, and we curve fitted the curve to provide the     parameters for Brooks and Corey type VC.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"create_soil_VC\nfit_soil_VC!","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.create_soil_VC","page":"PlantHydraulics","title":"Land.PlantHydraulics.create_soil_VC","text":"create_soil_VC(\n            vc::AbstractSoilVC{FT},\n            name::String,\n            α::Number,\n            n::Number,\n            Θs::Number,\n            Θr::Number\n) where {FT<:AbstractFloat}\ncreate_soil_VC(\n            vc::AbstractSoilVC{FT},\n            name::String\n) where {FT<:AbstractFloat}\n\nCreate a AbstractSoilVC type of soil VC, given\n\nvc AbstractSoilVC type identifier\nname Soil type name. Supported names include\n\"Sand\"\n\"Loamy Sand\"\n\"Sandy Loam\"\n\"Loam\"\n\"Sandy Clay Loam\"\n\"Silt Loam\"\n\"Silt\"\n\"Clay Loam\"\n\"Silty Clay Loam\"\n\"Sandy Clay\"\n\"Silty Clay\"\n\"Clay\"\nα Soil α\nn Soil n\nΘs SWC at saturation\nΘr Residual SWC\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.fit_soil_VC!","page":"PlantHydraulics","title":"Land.PlantHydraulics.fit_soil_VC!","text":"fit_soil_VC!(\n            vc_vG::VanGenuchten{FT},\n            vc_BC::BrooksCorey{FT}\n) where {FT<:AbstractFloat}\n\nUpdate BrooksCorey setup from known VanGenuchten parameters, given\n\nvc_vG VanGenuchten type soil VC\nvc_BC BrooksCorey type soil VC\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Correlations among soil relative water content, relative hydraulic conductance,     and soil matrix potential are","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"soil_erwc\nsoil_rwc\nsoil_swc\nsoil_k_ratio_erwc\nsoil_k_ratio_rwc\nsoil_k_ratio_swc\nsoil_k_ratio_p25\nsoil_p_25_erwc\nsoil_p_25_rwc\nsoil_p_25_swc","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_erwc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_erwc","text":"soil_erwc(sh::AbstractSoilVC{FT}, p_25::FT) where {FT<:AbstractFloat}\n\nReturns the Effective relative water content of the soil     fracΘ - ΘrΘs - Θr, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\np_25 Matrix water potential equivalent to 25 degree C, with surface tension\n\ncorrection\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_rwc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_rwc","text":"soil_rwc(sh::AbstractSoilVC{FT}, p_25::FT) where {FT<:AbstractFloat}\n\nReturns the relative soil water content, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\np_25 Matrix water potential equivalent to 25 degree C, with surface tension\n\ncorrection\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_swc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_swc","text":"soil_swc(sh::AbstractSoilVC{FT}, p_25::FT) where {FT<:AbstractFloat}\n\nReturns the soil water content, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\np_25 Matrix water potential equivalent to 25 degree C, with surface tension\n\ncorrection\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_k_ratio_erwc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_k_ratio_erwc","text":"soil_k_ratio_erwc(\n            sh::AbstractSoilVC{FT},\n            erwc::FT\n) where {FT<:AbstractFloat}\n\nReturn the soil k relative to maximal k, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\nerwc Effective relative soil water content (fracΘs - ΘrΘs - Θ)\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_k_ratio_rwc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_k_ratio_rwc","text":"soil_k_ratio_rwc(sh::AbstractSoilVC{FT}, rwc::FT) where {FT<:AbstractFloat}\n\nReturn the soil k relative to maximal k, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\nrwc Relative soil water content\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_k_ratio_swc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_k_ratio_swc","text":"soil_k_ratio_swc(sh::AbstractSoilVC{FT}, swc::FT) where {FT<:AbstractFloat}\n\nReturn the soil k relative to maximal k, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\nswc Relative soil water content\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_k_ratio_p25","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_k_ratio_p25","text":"soil_k_ratio_p25(\n            sh::AbstractSoilVC{FT},\n            p_25::FT\n) where {FT<:AbstractFloat}\n\nReturn the soil k relative to maximal k, given\n\nsh AbstractSoilVC type soil hydraulics\np_25 Matrix water potential equivalent to 25 degree C, with surface tension\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_p_25_erwc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_p_25_erwc","text":"soil_p_25_erwc(sh::AbstractSoilVC{FT}, erwc::FT) where {FT<:AbstractFloat}\n\nReturns the Relative water content of the soil, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\nerwc Effectibe relative soil water content (fracΘs - ΘrΘs - Θ)\n\nNote that this function returns the matrix potential of water, not water potential. Also, the potential is that at 25 degree C, not yet been corrected for temperature effect on surface tension.\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_p_25_rwc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_p_25_rwc","text":"soil_p_25_rwc(sh::AbstractSoilVC{FT}, rwc::FT) where {FT<:AbstractFloat}\n\nReturns the Relative water content of the soil, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\nrwc Relative soil water content\n\nNote that this function returns the matrix potential of water, not water potential. Also, the potential is that at 25 degree C, not yet been corrected for temperature effect on surface tension.\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.soil_p_25_swc","page":"PlantHydraulics","title":"Land.PlantHydraulics.soil_p_25_swc","text":"soil_p_25_swc(sh::AbstractSoilVC{FT}, rwc::FT) where {FT<:AbstractFloat}\n\nReturns the Relative water content of the soil, given\n\nsh BrooksCorey or VanGenuchten type soil hydraulics\nswc Soil water content\n\nNote that this function returns the matrix potential of water, not water potential. Also, the potential is that at 25 degree C, not yet been corrected for temperature effect on surface tension.\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Pressure-and-Flow","page":"PlantHydraulics","title":"Pressure and Flow","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"The PlantHydraulics module is designed to run numerically for the following     reasons:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Weibull function is cannot be integrated\nThe VC is segmented, i.e., if P  0, k = k_textmax (implemented in   xylem_k_ratio)\nOnce xylem cavitation occurs, it cannot be easily recovered unless P  0,   and thus there is a drought legacy effect. This is why there are a few   fields in the LeafHydraulics, RootHydraulics, and   StemHydraulics structs to store the drought history information.\nTemperature may change along the flow path. The f_st and f_vis in the   structs help deal with these effects.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Function end_pressure calculates the xylem end pressure for an     organ-level hysraulic system. As mentioned above, the     RootHydraulics and StemHydraulics has a gravity     component, and the RootHydraulics has a rhizosphere component.     Also be aware that end_pressure accounts for temperature     effects on surface tension and viscosity.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"end_pressure","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.end_pressure","page":"PlantHydraulics","title":"Land.PlantHydraulics.end_pressure","text":"end_pressure(\n            leaf::LeafHydraulics{FT},\n            flow::FT\n) where {FT<:AbstractFloat}\nend_pressure(\n            root::RootHydraulics{FT},\n            flow::FT\n) where {FT<:AbstractFloat}\nend_pressure(\n            stem::StemHydraulics{FT},\n            flow::FT\n) where {FT<:AbstractFloat}\nend_pressure(\n            tree::TreeSimple{FT},\n            flow::FT\n) where {FT<:AbstractFloat}\nend_pressure(\n            tree::TreeSimple{FT},\n            f_sl::FT,\n            f_sh::FT,\n            r_sl::FT\n) where {FT<:AbstractFloat}\n\nReturn the xylen end pressure(s) from flow rate(s), given\n\nleaf LeafHydraulics type struct\nflow Flow rate (per leaf area for LeafHydraulics)\nroot RootHydraulics type struct\nstem StemHydraulics type struct\ntree TreeSimple type struct\nf_sl Flow rate to sunlit leaves\nf_sh Flow rate to shaded leaves\nr_sl Fraction of sunlit leaves\n\nNote, gravity is accounted for in root and stem; rhizosphere conductance is     accounted for in root; extra-xylary conductance is not accounted for in     leaf here because it calculates xylem end pressure.\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Noe that function end_pressure does not update the pressure     profiles or history in the xylem. To update these profiles, use     pressure_profile!, and to remove these legacy profiles, use     inititialize_legacy!:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"pressure_profile!\ninititialize_legacy!","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.pressure_profile!","page":"PlantHydraulics","title":"Land.PlantHydraulics.pressure_profile!","text":"pressure_profile!(\n            leaf::LeafHydraulics{FT},\n            flow::FT;\n            update::Bool = true\n) where {FT<:AbstractFloat}\npressure_profile!(\n            root::RootHydraulics{FT},\n            flow::FT;\n            update::Bool = true\n) where {FT<:AbstractFloat}\npressure_profile!(\n            root::RootHydraulics{FT},\n            q_in::FT,\n            flow::Vector{FT};\n            update::Bool = true\n) where {FT<:AbstractFloat}\npressure_profile!(\n            stem::StemHydraulics{FT},\n            flow::FT;\n            update::Bool = true\n) where {FT<:AbstractFloat}\npressure_profile!(\n            stem::StemHydraulics{FT},\n            flow::Vector{FT};\n            update::Bool = true\n) where {FT<:AbstractFloat}\npressure_profile!(\n            tree::TreeSimple{FT},\n            p_soil::FT,\n            flow::FT;\n            update::Bool = true\n) where {FT<:AbstractFloat}\npressure_profile!(\n            tree::TreeSimple{FT},\n            p_soil::FT,\n            f_sl::FT,\n            f_sh::FT,\n            r_sl::FT;\n            update::Bool = true\n) where {FT<:AbstractFloat}\n\nUpdate the pressure profile, given\n\nleaf LeafHydraulics type struct\nroot RootHydraulics type struct\nstem StemHydraulics type struct\ntree TreeSimple type struct\np_soil Soil water potential\nflow Flow rate (per leaf area for LeafHydraulics)\nf_sl Flow rate to sunlit leaves\nf_sh Flow rate to shaded leaves\nr_sl Fraction of sunlit leaves\nupdate Optional. If true, update drought legacy. Default is true for   TreeSimple but false for others using capacitance\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.inititialize_legacy!","page":"PlantHydraulics","title":"Land.PlantHydraulics.inititialize_legacy!","text":"inititialize_legacy!(\n            hs::Union{LeafHydraulics,RootHydraulics,StemHydraulics})\ninititialize_legacy!(tree::GrassLikeOrganism)\ninititialize_legacy!(tree::PalmLikeOrganism)\ninititialize_legacy!(tree::TreeLikeOrganism)\ninititialize_legacy!(tree::TreeSimple)\n\nInitialize the drought legacy effects in the xylem, given\n\nhs [AbstractHydraulicOrgan] type struct\ntree TreeSimple type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Examples:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"FT = Float32;\nleaf = LeafHydraulics{FT}();\np = end_pressure(leaf, FT(0.01));\n@show leaf.p_element;\npressure_profile!(leaf, FT(0.01));\n@show leaf.p_element;","category":"page"},{"location":"submodules/PlantHydraulics/#Steady-state-and-non-steady-state-mode","page":"PlantHydraulics","title":"Steady state and non-steady state mode","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"AbstractFlowMode\nNonSteadyStateMode\nSteadyStateMode\nbuffer_rate","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.AbstractFlowMode","page":"PlantHydraulics","title":"Land.PlantHydraulics.AbstractFlowMode","text":"abstract type AbstractFlowMode\n\nHierarchy of AbstractFlowMode\n\nSteadyStateMode\nNonSteadyStateMode\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.NonSteadyStateMode","page":"PlantHydraulics","title":"Land.PlantHydraulics.NonSteadyStateMode","text":"struct NonSteadyStateMode <: AbstractFlowMode\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.SteadyStateMode","page":"PlantHydraulics","title":"Land.PlantHydraulics.SteadyStateMode","text":"struct SteadyStateMode <: AbstractFlowMode\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.buffer_rate","page":"PlantHydraulics","title":"Land.PlantHydraulics.buffer_rate","text":"buffer_rate(pv::AbstractCapacity{FT}) where {FT<:AbstractFloat}\n\nReturn the buffer rate, given\n\npv AbstractCapacity type struct\n\nNote that only symplastic water can be used as capacitance\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Root-Hydraulics","page":"PlantHydraulics","title":"Root Hydraulics","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Function end_pressure works for the case of only 1 root layer if     one needs the plant base xylem water pressure. However, when there are     multiple root layers, end_pressure does not apply. In this     case, iterations are required to calculate the xylem end pressure for each     root layers, and then make sure all root layers have the same xylem end     pressure. A few functions are provided to realize this.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Function xylem_flow uses Root Solving method to calculate     the flow rate through the RootHydraulics struct that yields the     given xylem end pressure. The ini in the function is optional. However,     using the flow rate from last instant when pressure does not differ much     will speed up the calculation.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"xylem_flow","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.xylem_flow","page":"PlantHydraulics","title":"Land.PlantHydraulics.xylem_flow","text":"xylem_flow(root::RootHydraulics{FT},\n           pressure::FT,\n           ini::FT = FT(1)\n) where {FT<:AbstractFloat}\n\nCalculate the flow rate from a given tree base pressure, given\n\nroot RootHydraulics type struct\npressure Given tree base pressure in [MPa]\nini Initial guess\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"In the plant hydraulic module design, flow rate is computed for each canopy     layer, and thus computing flow rate for each root layer is required for a     multiple layered root system. One feasible way is to do iterations using     xylem_flow function, i.e., iterate the xylem end     pressure til the total flow rate equals the given value. However, this     method is too inefficient. What I did is","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Calculate the xylem end pressure and whole root layer conductance from the   initial flow rate;\nCalculate the mean xylem end pressure, and tune the flow rates in all root   layers using the difference from mean pressure and root conductance;\nSum up the new flow rates, and calculate the difference with given total flow   rate;\nUse the calculated condutcance to weight out the differences.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"The functions provided by PlantHydraulics module are","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"root_pk\nroots_flow!","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.root_pk","page":"PlantHydraulics","title":"Land.PlantHydraulics.root_pk","text":"root_pk(root::RootHydraulics{FT},\n        flow::FT\n) where {FT<:AbstractFloat}\nroot_pk(root::RootHydraulics{FT},\n        q_in::FT,\n        flow::Vector{FT}\n) where {FT<:AbstractFloat}\n\nReturn root xylem end pressure and root hydraulic conductance (reverse of     summed resistance), given\n\nroot RootHydraulics struct\nflow Given flow rate(s) in the root layer, array for non-steady state with   capacitance enabled\nq_in Flow rate into the root\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.roots_flow!","page":"PlantHydraulics","title":"Land.PlantHydraulics.roots_flow!","text":"roots_flow!(roots::Vector{RootHydraulics{FT}},\n            ks::Vector{FT},\n            ps::Vector{FT},\n            qs::Vector{FT},\n            flow::FT,\n            recalculate::Bool\n) where {FT<:AbstractFloat}\nroots_flow!(roots::Vector{RootHydraulics{FT}},\n            ks::Vector{FT},\n            ps::Vector{FT},\n            qs::Vector{FT},\n            flow::FT\n) where {FT<:AbstractFloat}\nroots_flow!(plant::Union{GrassLikeOrganism{FT},\n                         PalmLikeOrganism{FT},\n                         TreeLikeOrganism{FT}},\n            flow::FT\n) where {FT<:AbstractFloat}\n\nRecalculate the flow rates in the root from the pressure and conductance     profiles in each root at non-steady state, given\n\nroots Array of RootHydraulics structs\nks Container for conductance in each root layer\nps Container for end xylem pressure in each layer\nqs Container for flow rate out of each layer\nflow Total flow rate out of the roots\nrecalculate A paceholder indicator of recalculating root flow (useless)\nplant AbstractPlantOrganism type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"However, the steps above are only 1 iteration, and can only be used for the     non-steady state version of model. For the steady-state flow rates,     function roots_flow! does thw work. What the function does is to     iterate roots_flow! till the difference among the     calculated end pressures is small enough. I also emphasize that to speed up     the code, 3 containers are added to the AbstractPlantOrganism     structs, and they are cache_k, cache_p, and cache_q.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Example:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"FT = Float32;\npalm = create_palm(FT(-2.1), FT(0.5), FT(8), FT[0,-1,-2,-3], collect(FT,0:1:20));\nroots_flow!(palm.roots, palm.cache_k, palm.cache_p, palm.cache_q, FT(1));","category":"page"},{"location":"submodules/PlantHydraulics/#Leaf-Hydraulics","page":"PlantHydraulics","title":"Leaf Hydraulics","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"The stomatal models often require plant hydraulics either as a correction     factor (in empirical stomatal models) or as the risk term (in optimal     stomatal models). To facilitate the calculations, a few specific functions     are provided.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Function xylem_risk returns the risk in xylem hydraulic function     based on the most downstream end of the xylem. The risk of plant hydraulic     system is not only on current system, but also potential new growth (plants     don't want to risk new growth either). Thus, function     xylem_risk evaluates the risk from the xylem pressure     calculated from current system (with drought history), and then compute the     risk from the pressure (the severer the srought history, the higher the     risk):","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"xylem_risk","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.xylem_risk","page":"PlantHydraulics","title":"Land.PlantHydraulics.xylem_risk","text":"xylem_risk(hs::LeafHydraulics{FT}, flow::FT) where {FT<:AbstractFloat}\n\nEvaluate the hydraulic risk at the end of leaf xylem, given\n\nhs LeafHydraulics type struct\nflow Flow rate (per leaf area)\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Note that function xylem_risk can work on its own without having     other organ-level components. For example, by changing the p_ups of a     LeafHydraulics, one can simulate the case of drought without     caring about other hydraulic systems. Same for function     critical_flow below. However, these functions are only useful for     sensitivity analysis or when p_ups in the LeafHydraulics is     accurate.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Examples","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"FT = Float32;\nleaf = LeafHydraulics{FT}();\nrisk = xylem_risk(leaf, FT(0.01));\n@show risk;\nleaf.p_ups = FT(-1.0);\nrisk = xylem_risk(leaf, FT(0.01));\n@show risk;","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Function critical_flow calculates critical leaf transpiration rate,     beyond which leaf will desicate. Function critical_flow accounts     for drought legacy effect by design, and the more severe the drought     history, the lower the critical_flow. Again, ini in the function is also     optional, but a good guess will speed up the calculations.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Examples","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"FT = Float32;\nleaf = LeafHydraulics{FT}();\nrisk = critical_flow(leaf);\n@show risk;\nleaf.p_ups = FT(-1.0);\nrisk = critical_flow(leaf);\n@show risk;","category":"page"},{"location":"submodules/PlantHydraulics/#Whole-plant-Hydraulics","page":"PlantHydraulics","title":"Whole-plant Hydraulics","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Though xylem_risk and critical_flow can work on their     own, the functions only evaluate the risks on leaf level. The more     realistic case is that when leaf transpiration rate increases, p_ups in     the LeafHydraulics gets more negative. Thus, the     xylem_risk and critical_flow tends to underestimate     the risk and overestimate the critical flow rate. To overcome this problem,     whole-plant level plant hydraulics are provided.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Function end_pressure calculates the leaf xylem end pressure for     a whole-plant struct using these steps:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"calculate the plant base pressure from a given total flow rate\ncalculate the trunk end pressure (if present)\ncalculate the branch end pressure (if present)\ncalculate the leaf end pressure (if present)","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Accordingly, there is a function critical_flow to calculate the     critical flow rate for the whole plant. Be aware that Plant-level function     end_pressure and critical_flow only applies to the     case of only one canopy layer (or big-leaf model). As to the case of     multiple canopy layer, more functions are pending.","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"critical_flow","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.critical_flow","page":"PlantHydraulics","title":"Land.PlantHydraulics.critical_flow","text":"critical_flow(\n            hs::LeafHydraulics{FT},\n            ini::FT = FT(0.5)\n) where {FT<:AbstractFloat}\ncritical_flow(\n            tree::TreeSimple{FT},\n            ini::FT = FT(0.5)\n) where {FT<:AbstractFloat}\n\nCalculate the critical flow rate (K ≈ 0), given\n\nhs LeafHydraulics type struct\nini Initial guess\ntree TreeSimple type struct\n\nNote, for the safety of no NaN, update critical_flow when ΔP >= -0.01\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Note that the organ level or whole-plant level conductances are different from     xylem hydraulic conductance at a given xylem slice. Also, simply computing     the conductance as the flow rate divided by pressre drop is not accurate     because of the gravity. In the PlantHydraulics module, the organ and     whole-plant level conductances are computed by firstly adding up all the     resistances in each element, and then computing the relative loss of     conductance. The function available to use is","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"plant_conductances!","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.plant_conductances!","page":"PlantHydraulics","title":"Land.PlantHydraulics.plant_conductances!","text":"plant_conductances!(tree::TreeSimple{FT}) where {FT<:AbstractFloat}\n\nUpdate plant total hydraulic information in each element and whole plant, given\n\ntree TreeSimple type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Temperature-effects","page":"PlantHydraulics","title":"Temperature effects","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Plant hydraulic properties changes with temperature, due to its impacts on     surface tension and viscosity. As to surface tension, when temperature     increases, air-water interface surface tension decreases, meaning that with     the same curvature, the capillary pressure provided decreases. As a result,     soil matrix potential becomes less nagative (good for plants!), but the     conduit resistance to cavitation decreases (bad for plants!). As to     viscosity, when temperature increases, viscosity decreases, meaning that     pressure drop decreases at the same flow rate (good for plants!). To     account for these effects, we provided temperature_effects!     function:","category":"page"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"temperature_effects!","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.temperature_effects!","page":"PlantHydraulics","title":"Land.PlantHydraulics.temperature_effects!","text":"temperature_effects!(\n            hs::LeafHydraulics{FT}\n) where {FT<:AbstractFloat}\ntemperature_effects!(\n            hs::AbstractHydraulicOrgan{FT}\n) where {FT<:AbstractFloat}\ntemperature_effects!(\n            hs::AbstractHydraulicOrgan{FT},\n            T::FT\n) where {FT<:AbstractFloat}\ntemperature_effects!(\n            tree::TreeSimple{FT}\n) where {FT<:AbstractFloat}\n\nUpdate temperature effetcs on hydralic system, given\n\nhs AbstractHydraulicOrgan type struct\nT Given temperature\ntree TreeSimple type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"Keep in mind that, leaf critical pressure changes due to surface tension,     though the impact can be neglected for minor temperature change. However,     soil water content is still computed using the equivalent matrix potential     at 25 Celcius because water content is only related to the air-water     interface curvature.","category":"page"},{"location":"submodules/PlantHydraulics/#Pressure-volume-curve","page":"PlantHydraulics","title":"Pressure-volume curve","text":"","category":"section"},{"location":"submodules/PlantHydraulics/","page":"PlantHydraulics","title":"PlantHydraulics","text":"AbstractCapacity\nPVCurveLinear\nPVCurveSegmented\np_from_volume\nupdate_PVF!","category":"page"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.AbstractCapacity","page":"PlantHydraulics","title":"Land.PlantHydraulics.AbstractCapacity","text":"abstract type AbstractCapacity{FT<:AbstractFloat}\n\nHierachy of AbstractCapacity\n\nPVCurveLinear\nPVCurveSegmented\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.PVCurveLinear","page":"PlantHydraulics","title":"Land.PlantHydraulics.PVCurveLinear","text":"mutable struct PVCurveLinear{FT<:AbstractFloat} <: Land.PlantHydraulics.AbstractCapacity{FT<:AbstractFloat}\n\nStruct that contains information for linear PV curve\n\nFields\n\nslope::AbstractFloat: Slope of the linear PV curve (relative to maximum) [MPa⁻¹]\nk_refill::AbstractFloat: Conductance for refilling (relative to maximum) [MPa⁻¹ s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.PVCurveSegmented","page":"PlantHydraulics","title":"Land.PlantHydraulics.PVCurveSegmented","text":"mutable struct PVCurveSegmented{FT} <: Land.PlantHydraulics.AbstractCapacity{FT}\n\n\n\n\n\n","category":"type"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.p_from_volume","page":"PlantHydraulics","title":"Land.PlantHydraulics.p_from_volume","text":"p_from_volume(\n            pv::AbstractCapacity{FT},\n            rvol::FT,\n            T::FT\n) where {FT<:AbstractFloat}\n\nCalculate equilibrium pressure from relative volume, given\n\npv AbstractCapacity type of struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/PlantHydraulics/#Land.PlantHydraulics.update_PVF!","page":"PlantHydraulics","title":"Land.PlantHydraulics.update_PVF!","text":"update_PVF!(hs::LeafHydraulics{FT}, Δt::FT) where {FT<:AbstractFloat}\nupdate_PVF!(hs::StemHydraulics{FT}, Δt::FT) where {FT<:AbstractFloat}\nupdate_PVF!(hs::RootHydraulics{FT}, Δt::FT) where {FT<:AbstractFloat}\nupdate_PVF!(hs::RootHydraulics{FT},\n            Δt::FT,\n            nss::Bool\n) where {FT<:AbstractFloat}\nupdate_PVF!(roots::Vector{RootHydraulics{FT}},\n            ks::Vector{FT},\n            ps::Vector{FT},\n            qs::Vector{FT},\n            q_sum::FT,\n            Δt::FT\n) where {FT<:AbstractFloat}\nupdate_PVF!(tree::GrassLikeOrganism{FT}, Δt::FT) where {FT<:AbstractFloat}\nupdate_PVF!(tree::PalmLikeOrganism{FT}, Δt::FT) where {FT<:AbstractFloat}\nupdate_PVF!(tree::TreeLikeOrganism{FT}, Δt::FT) where {FT<:AbstractFloat}\n\nUpdate pressure, capacitance, and flow rates in hydraulic system, given\n\nhs AbstractHydraulicOrgan or AbstractPlantOrganism type   struct\nΔt Time interval\nnss NonSteadyStateMode placeholder (useless)\nks Container for conductance in each root layer\nps Container for end xylem pressure in each layer\nqs Container for flow rate out of each layer\nq_sum Total flow rate out of the roots\ntree GrassLikeOrganism, PalmLikeOrganism, or   TreeLikeOrganism type struct\n\nNote that this function only updates the equilibrium pressure in the tissue,     but not the xylem flow pressure. The difference between the two pressures     is used to drive water exchange between xylem and capacictance tissues.\n\n\n\n\n\n","category":"function"},{"location":"submodules/Land/#Land","page":"Land","title":"Land","text":"","category":"section"},{"location":"submodules/Land/","page":"Land","title":"Land","text":"CurrentModule = Land","category":"page"},{"location":"#CliMA-Land-Model-v0.1","page":"Home","title":"CliMA Land Model v0.1","text":"","category":"section"},{"location":"#Install-CliMA-Land-Model-v0.1","page":"Home","title":"Install CliMA Land Model v0.1","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(PackageSpec(url=\"https://github.com/silicormosia/clima-land-v0.1.git\"))\njulia> using Land","category":"page"},{"location":"tips/#Git-and-Julia-Tips-for-CliMA-Land-v0.1","page":"Tips","title":"Git and Julia Tips for CliMA Land v0.1","text":"","category":"section"},{"location":"tips/#Instantiate-the-project","page":"Tips","title":"Instantiate the project","text":"","category":"section"},{"location":"tips/","page":"Tips","title":"Tips","text":"The Land project\ncd .../Land to the home directory of the project\njulia --project\nusing Pkg\nPkg.instantiate()\nDelete the file Manifest.toml when encountering errors\nRedo Pkg.instantiate()\nThe docs/ project\ncd .../Land/docs\njulia --project\nusing Pkg\nPkg.instantiate()\nDelete the file Manifest.toml when encountering erros\nDelete the line Land=\"*\" in the Project.toml\nType ] in the julia REPL to enter the pkg environment\ndev .. or add .. to add the Land project\nRedo Pkg.instantiate()","category":"page"},{"location":"tips/#Run-local-tests-before-merging-into-main","page":"Tips","title":"Run local tests before merging into main","text":"","category":"section"},{"location":"tips/","page":"Tips","title":"Tips","text":"Optional: load the Land project\ncd .../Land to the home directory of the project\njulia --project\nusing Land to make sure the project can be loaded\nOptional: disable the example to save some time\nchange generate_examples = true to generate_examples = false in file docs/examples.jl\nchange the line back to generate_examples = true before commiting the changes\nOptional: initialize the project\ncd .../Land to the home directory of the project\njulia --project -e \"using Pkg; Pkg.instantiate(); Pkg.build(); Pkg.precompile();\"\njulia --project=docs/ -e \"using Pkg; Pkg.instantiate(); Pkg.build(); Pkg.precompile();\"\nTest the documentation project\njulia --project=docs/ docs/make.jl\nFix errors and warnings associated with Land project\nTest the Land project\njulia --project -e \"using Pkg; Pkg.test();\"\nResolve failed tests","category":"page"},{"location":"tips/#Rebase-the-commits-before-merging-into-main","page":"Tips","title":"Rebase the commits before merging into main","text":"","category":"section"},{"location":"tips/","page":"Tips","title":"Tips","text":"Switch to the feature branch and make sure you have a clean workspace\ngit checkout FeatureBranch\ngit status to confirm zero uncommitted changes\nBackup current branch to avoid unexpected errors\ngit checkout -b FeatureBranch_Backup\nSync the main branch\ngit checkout main\ngit pull\nSwitch to the feature branch and merge main into it\ngit checkout FeatureBranch\ngit status to confirm zero uncommitted changes\ngit merge main\nResolve conflicts and commit them if any\nReabse the feature branch\ngit reset origin/main to rewrite history\ngit diff (optional) would show all the changes\ngit add --all to add local changes on top of main\ngit commit -m \"Single commit message\"\ngit push -f to force push because of the re-written history\nCreate a Pull Request\nThrough the web\nRemove local unnecessary branch (e.g., FeatureBranch_backup)\ngit branch -d FeatureBranch_Backup\ngit branch -D FeatureBranch_Backup to force remove","category":"page"},{"location":"submodules/Photosynthesis/#Photosynthesis","page":"Photosynthesis","title":"Photosynthesis","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"CurrentModule = Land.Photosynthesis","category":"page"},{"location":"submodules/Photosynthesis/#Leaf-and-Environment-Structures","page":"Photosynthesis","title":"Leaf and Environment Structures","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"To model photosynthesis more efficiently, we use a container (Leaf     struct) to store the photosynthesis-related information. For example, many     of the physiological parameters are temperature-dependent, but these     temperature-dependent values only need to be updated when leaf temperature     changes. Therefore, use of the container significantly reduces the time     required when programing leaf gas exchange prognostically. The     Leaf struct has the following fields:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Leaf","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.Leaf","page":"Photosynthesis","title":"Land.Photosynthesis.Leaf","text":"mutable struct Leaf{FT}\n\nStruct to store leaf information.\n\nFields\n\nT::AbstractFloat: Temperature [K]\nT_old::AbstractFloat: Old Temperature [K], if not T, run leaftemperaturedependence!\nKd::AbstractFloat: Rate constant for thermal dissipation\nKf::AbstractFloat: Rate constant for fluorescence (const)\nKr::AbstractFloat: Reversible NPQ rate constant (initially zero)\nKs::AbstractFloat: Sustained NPQ rate constant (for seasonal changes, default is zero)\nKp::AbstractFloat: Rate constant for photochemistry (all reaction centers open)\nKp_max::AbstractFloat: Maximal Kp\nmaxPSII::AbstractFloat: max PSII yield (Kr=0, all RC open)\nPSII_frac::AbstractFloat: Fraction of absorbed light used by PSII ETR\nKd_TD::Bool: Whether Kd is temperature dependent\np_i::AbstractFloat: Leaf internal CO₂ partial pressure [Pa]\np_s::AbstractFloat: Leaf surface CO₂ partial pressure [Pa]\np_sat::AbstractFloat: Saturation H₂O vapor pressure [Pa]\ng_bc::AbstractFloat: Leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\ng_lc::AbstractFloat: Leaf diffusive conductance to CO₂ [mol m⁻² s⁻¹]\nAc::AbstractFloat: RubisCO limited photosynthetic rate [μmol m⁻² s⁻¹]\nAj::AbstractFloat: Light limited photosynthetic rate [μmol m⁻² s⁻¹]\nAg::AbstractFloat: Gross photosynthetic rate [μmol m⁻² s⁻¹]\nAn::AbstractFloat: Net photosynthetic rate [μmol m⁻² s⁻¹]\nAp::AbstractFloat: Product limited photosynthetic rate [μmol m⁻² s⁻¹]\nJ::AbstractFloat: Electron transport [μmol m⁻² s⁻¹]\nJ_pot::AbstractFloat: Potential Electron Transport Rate [μmol m⁻² s⁻¹]\nJmax::AbstractFloat: Maximal electron transport rate [μmol m⁻² s⁻¹]\nJmax25::AbstractFloat: Maximal electron transport rate at 298.15 K [μmol m⁻² s⁻¹]\nKc::AbstractFloat: RubisCO coefficient Kc [Pa]\nKo::AbstractFloat: RubisCO coefficient Ko [Pa]\nKpep::AbstractFloat: PEP coefficient Ko [Pa]\nKm::AbstractFloat: Michaelis-Menten's coefficient [Pa]\nRd::AbstractFloat: Respiration rate [μmol m⁻² s⁻¹]\nRd25::AbstractFloat: Respiration rate at 298.15 K [μmol m⁻² s⁻¹]\nVcmax::AbstractFloat: Maximal carboxylation rate [μmol m⁻² s⁻¹]\nVcmax25::AbstractFloat: Maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\nVpmax::AbstractFloat: Maximal PEP carboxylation rate [μmol m⁻² s⁻¹]\nVpmax25::AbstractFloat: Maximal PEP carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\nΓ_star::AbstractFloat: CO₂ compensation point with the absence of Rd [Pa]\nC_b₆f::AbstractFloat: Total concentration of Cytochrome b₆f [μmol m⁻²]\nk_q::AbstractFloat: Maximal turnover rate of Cytochrome b₆f [e⁻ s⁻¹]\nVqmax::AbstractFloat: Maximal Cytochrome b₆f activity [μmol e⁻ m⁻² s⁻¹]\nK_D1::AbstractFloat: Rate constant of consititutive heat loss from the antennae [s⁻¹]\nK_F1::AbstractFloat: rate constant of fluorescence [s⁻¹]\nK_N1::AbstractFloat: Rate constant of regulated heat loss for PS I [s⁻¹]\nK_P1::AbstractFloat: Rate constant of photochemistry for PS I [s⁻¹]\nK_P2::AbstractFloat: Rate constant of photochemistry for PS II [s⁻¹]\nK_U2::AbstractFloat: Rate constant of excitation sharing for PS II [s⁻¹]\nα_1::AbstractFloat: PPFD absorbed by PS I per incident PPFD\nα_2::AbstractFloat: PPFD absorbed by PS II per incident PPFD\nϵ_1::AbstractFloat: Weighting factor for PS I\nϵ_2::AbstractFloat: Weighting factor for PS II\nφ_P1_max::AbstractFloat: Maximal PS I photochemical yield\nn_C::AbstractFloat: Coupling efficiency of cyclic electron flow [mol ATP mol⁻¹ e⁻]\nn_L::AbstractFloat: Coupling efficiency of linear electron flow [mol ATP mol⁻¹ e⁻]\nη::AbstractFloat: ratio between JP700 and JP680\nJ_P680_a::AbstractFloat: PS II electron transport rate [μmol e⁻ m⁻² s⁻¹]\nJ_P680_c::AbstractFloat: Rubisco limited PS II electron transport rate [μmol e⁻ m⁻² s⁻¹]\nJ_P680_j::AbstractFloat: Light limited PS II electron transport rate [μmol e⁻ m⁻² s⁻¹]\nJ_P680_p::AbstractFloat: Product limited PS II electron transport rate [μmol e⁻ m⁻² s⁻¹]\nJ_P700_a::AbstractFloat: PS I electron transport rate [μmol e⁻ m⁻² s⁻¹]\nJ_P700_c::AbstractFloat: Rubisco limited PS I electron transport rate [μmol e⁻ m⁻² s⁻¹]\nJ_P700_j::AbstractFloat: Light limited PS I electron transport rate [μmol e⁻ m⁻² s⁻¹]\nJ_P700_p::AbstractFloat: Product limited PS I electron transport rate [μmol e⁻ m⁻² s⁻¹]\nJmax25WW::AbstractFloat: Well watered maximal electron transport rate at 298.15 K [μmol m⁻² s⁻¹]\nRd25WW::AbstractFloat: Well watered respiration rate at 298.15 K [μmol m⁻² s⁻¹]\nVcmax25WW::AbstractFloat: Well watered maximal carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\nVpmax25WW::AbstractFloat: Well watered maximal PEP carboxylation rate at 298.15 K [μmol m⁻² s⁻¹]\ne2c::AbstractFloat: Total efficiency, incl. photorespiration [mol CO₂ mol⁻¹ e-]\nFm::AbstractFloat: dark adapted yield (Kp=0)\nFm′::AbstractFloat: light adapted yield (Kp=0)\nFo::AbstractFloat: dark-adapted fluorescence yield (Kp=max)\nFo′::AbstractFloat: light-adapted fluorescence yield in the dark (Kp=max)\nJa::AbstractFloat: Actual electron transport rate [μmol m⁻² s⁻¹]\nNPQ::AbstractFloat: Non-Photochemical quenching\nqQ::AbstractFloat: Photochemical quenching\nqE::AbstractFloat: energy quenching\nφ::AbstractFloat: PSII yield\nφs::AbstractFloat: Steady-state (light-adapted) yield (aka Fs)\nAPAR::AbstractFloat: Absorbed photosynthetic active radiation [μmol m⁻² s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Also, environmental conditions are required to compute photosynthetic rate, and     these conditions are stored in AirLayer struct. An     AirLayer struct further allows for more conveniently modeling     photosynthesis the vertical CO₂ and H₂O gradients in the canopy. The     AirLayer structs has the following fields:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"AirLayer","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.AirLayer","page":"Photosynthesis","title":"Land.Photosynthesis.AirLayer","text":"mutable struct AirLayer{FT}\n\nStruct to store environmental conditions in each air layer corresponds to one     canopy layer.\n\nFields\n\nt_air::AbstractFloat: Air temperature [K]\np_a::AbstractFloat: Atmospheric CO₂ partial pressure [Pa]\np_atm::AbstractFloat: Atmospheric pressure [Pa]\np_H₂O::AbstractFloat: Atmospheric vapor pressure [Pa]\np_O₂::AbstractFloat: Atmospheric O₂ partial pressure [Pa]\np_sat::AbstractFloat: Saturation vapor pressure [Pa]\nRH::AbstractFloat: Relatiev humidity\nvpd::AbstractFloat: Vapor pressure deficit [Pa]\nwind::AbstractFloat: Wind speed [m s⁻¹]\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"See exmaples below for how to create the structs","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"FT = Float32;\nleaf = Leaf{FT}();\nenvir = AirLayer{FT}();","category":"page"},{"location":"submodules/Photosynthesis/#Temperature-Dependency-Structs","page":"Photosynthesis","title":"Temperature Dependency Structs","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The temperature-dependent (TD) photosynthetic parameters include","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"J_textmax Maximal electron transport rate\nK_textc Michaelis constant for CO₂\nK_textm Michaelis-Menten's coefficient\nK_texto Michaelis constant for O₂\nK_textpep Michaelis constant for PEP carboxylation\nR_textd Dark respiration\nV_textcmax Maximal RuBP carboxylation rate\nV_textomax Maximal RuBP oxygenation rate\nV_textpmax Maximal PEP carboxylation rate\nΓ^* CO₂ compensation point with the absence of dark respiration","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"There are two typical types of temperature dependencies using the classic     Arrhenius equation. We define the three types as ArrheniusTD,     ArrheniusPeakTD, and Q10TD subject to     AbstractTDParameterSet type:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"AbstractTDParameterSet\nArrheniusTD\nArrheniusPeakTD\nQ10TD","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.AbstractTDParameterSet","page":"Photosynthesis","title":"Land.Photosynthesis.AbstractTDParameterSet","text":"abstract type AbstractTDParameterSet{FT}\n\nHierarchy of the AbstractTDParameterSet:\n\nArrheniusTD\nArrheniusPeakTD\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.ArrheniusTD","page":"Photosynthesis","title":"Land.Photosynthesis.ArrheniusTD","text":"struct ArrheniusTD{FT}\n\nAn AbstractTDParameterSet type struct using\n\ncorr = exp left( dfracΔHaR T_0 - dfracΔHaR T_1 right)\n\nFields\n\nVAL_25::AbstractFloat: Uncorrected value at 298.15 K\nΔHa_to_R::AbstractFloat: Ratio between ΔHa and R [K]\nΔHa_to_RT25::AbstractFloat: Ratio between ΔHa and R*K_25\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.ArrheniusPeakTD","page":"Photosynthesis","title":"Land.Photosynthesis.ArrheniusPeakTD","text":"struct ArrheniusPeakTD{FT}\n\nAn AbstractTDParameterSet type struct using\n\ncorr = exp left( dfracΔHaR T_0 - dfracΔHaR T_1 right)\n       cdot\n       dfrac 1 + exp left( dfracS_v T_0 - H_dR T_0 right) \n               1 + exp left( dfracS_v T_1 - H_dR T_1 right) \n\nFields\n\nΔHa_to_RT25::AbstractFloat: Ratio between ΔHa and R*K_25\nΔHd_to_R::AbstractFloat: Ratio between ΔHd and R\nΔSv_to_R::AbstractFloat: Ratio between ΔSv and R\nC::AbstractFloat: Correction factor C = 1 + exp( Sv/R + Hd/(RT0) )\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.Q10TD","page":"Photosynthesis","title":"Land.Photosynthesis.Q10TD","text":"struct Q10TD{FT}\n\nAn AbstractTDParameterSet type struct using\n\nVAL = VAL_REF left( dfracT_1 - T_REF10 right)^Q_10\n\nFields\n\nVAL_REF::AbstractFloat: Uncorrected value at reference temperature\nT_REF::AbstractFloat: Reference temperature [K]\nQ_10::AbstractFloat: Power of Q10 correction\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"There are many published parameter sets for the various temperature     dependencies, and to ease the modeling we predefined most of the structs:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"JmaxTDBernacchi\nJmaxTDCLM\nJmaxTDLeuning\nKcTDBernacchi\nKcTDCLM\nKoTDBernacchi\nKoTDCLM\nKpepTDBoyd\nKpepTDCLM\nQ10TDAngiosperm\nQ10TDGymnosperm\nRespirationTDBernacchi\nRespirationTDCLM\nVcmaxTDBernacchi\nVcmaxTDCLM\nVcmaxTDLeuning\nVomaxTDBernacchi\nVpmaxTDBoyd\nΓStarTDBernacchi\nΓStarTDCLM","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.JmaxTDBernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.JmaxTDBernacchi","text":"ArrheniusPeakTD type Jmax TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.JmaxTDCLM","page":"Photosynthesis","title":"Land.Photosynthesis.JmaxTDCLM","text":"ArrheniusPeakTD type Jmax TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.JmaxTDLeuning","page":"Photosynthesis","title":"Land.Photosynthesis.JmaxTDLeuning","text":"ArrheniusPeakTD type Jmax TD from Leuning's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.KcTDBernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.KcTDBernacchi","text":"ArrheniusTD type Kc TD from Bernacchi's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.KcTDCLM","page":"Photosynthesis","title":"Land.Photosynthesis.KcTDCLM","text":"ArrheniusTD type Kc TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.KoTDBernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.KoTDBernacchi","text":"ArrheniusTD type Ko TD from Bernacchi's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.KoTDCLM","page":"Photosynthesis","title":"Land.Photosynthesis.KoTDCLM","text":"ArrheniusTD type Ko TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.KpepTDBoyd","page":"Photosynthesis","title":"Land.Photosynthesis.KpepTDBoyd","text":"ArrheniusTD type Kpep TD from Boyd's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.KpepTDCLM","page":"Photosynthesis","title":"Land.Photosynthesis.KpepTDCLM","text":"ArrheniusTD type Kpep TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.Q10TDAngiosperm","page":"Photosynthesis","title":"Land.Photosynthesis.Q10TDAngiosperm","text":"Q10TD type Respiration TD for angiosperms per biomass \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.Q10TDGymnosperm","page":"Photosynthesis","title":"Land.Photosynthesis.Q10TDGymnosperm","text":"Q10TD type Respiration TD for symnosperms per biomass \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.RespirationTDBernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.RespirationTDBernacchi","text":"ArrheniusTD type Respiration TD from Bernacchi's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.RespirationTDCLM","page":"Photosynthesis","title":"Land.Photosynthesis.RespirationTDCLM","text":"ArrheniusPeakTD type Respiration TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.VcmaxTDBernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.VcmaxTDBernacchi","text":"ArrheniusTD type Vcmax TD from Bernacchi's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.VcmaxTDCLM","page":"Photosynthesis","title":"Land.Photosynthesis.VcmaxTDCLM","text":"ArrheniusPeakTD type Vcmax TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.VcmaxTDLeuning","page":"Photosynthesis","title":"Land.Photosynthesis.VcmaxTDLeuning","text":"ArrheniusPeakTD type Vcmax TD from Leuning's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.VomaxTDBernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.VomaxTDBernacchi","text":"ArrheniusTD type Vomax TD from Bernacchi's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.VpmaxTDBoyd","page":"Photosynthesis","title":"Land.Photosynthesis.VpmaxTDBoyd","text":"ArrheniusPeakTD type Vpmax TD from Boyd's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.ΓStarTDBernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.ΓStarTDBernacchi","text":"ArrheniusTD type Γ^* TD from Bernacchi's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.ΓStarTDCLM","page":"Photosynthesis","title":"Land.Photosynthesis.ΓStarTDCLM","text":"ArrheniusTD type Γ* TD \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The TDs can be easily created using commands like","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"FT = Float32;\n_td_1 = JmaxTDBernacchi(FT);\n_td_2 = VcmaxTDCLM(FT);","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"However, be aware that these pre-defined TD structs are not mutable, to create     customized TD struct, code like this will be useful","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"FT = Float32;\n_td_1 = ArrheniusTD{FT}(1, 10000, 30);\n_td_1 = ArrheniusPeakTD{FT}(1, 10000, 30, 1);","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"To further simplify the use of Photosynthesis module, we provide a few     collections/structs of temperature dependencies as well as other parameter     sets like FluoParaSet. The structs are catergorized to     C3ParaSet and C4ParaSet subject to an     AbstractPhotoModelParaSet type, and the structs are meant for     modeling C3 photosynthesis and C4 photosynthesis, respectively.","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"AbstractPhotoModelParaSet\nC3ParaSet\nC4ParaSet","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.AbstractPhotoModelParaSet","page":"Photosynthesis","title":"Land.Photosynthesis.AbstractPhotoModelParaSet","text":"abstract type AbstractPhotoModelParaSet{FT}\n\nHierarchy of the AbstractPhotoModelParaSet:\n\nC3ParaSet\nC4ParaSet\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.C3ParaSet","page":"Photosynthesis","title":"Land.Photosynthesis.C3ParaSet","text":"mutable struct C3Paraset{FT}\n\nParameter sets for C3 photosynthesis.\n\nFields\n\nJT::Land.Photosynthesis.AbstractTDParameterSet{FT} where FT<:AbstractFloat: Jmax temperature dependency\nKcT::Land.Photosynthesis.AbstractTDParameterSet{FT} where FT<:AbstractFloat: Kc temperature dependency\nKoT::Land.Photosynthesis.AbstractTDParameterSet{FT} where FT<:AbstractFloat: Ko temperature dependency\nReT::Land.Photosynthesis.AbstractTDParameterSet{FT} where FT<:AbstractFloat: Respiration temperature dependency\nVcT::Land.Photosynthesis.AbstractTDParameterSet{FT} where FT<:AbstractFloat: Vcmax temperature dependency\nΓsT::Land.Photosynthesis.AbstractTDParameterSet{FT} where FT<:AbstractFloat: Γ_star temperature dependency\nFlu::Land.Photosynthesis.AbstractFluoModelParaSet{FT} where FT<:AbstractFloat: Fluorescence model\nVR::AbstractFloat: Vcmax25 and respiration correlation\nEff_1::AbstractFloat: Coefficient 4.0/4.5 for NADPH/ATP requirement stochiometry, respectively\nEff_2::AbstractFloat: Coefficient 8.0/10.5 for NADPH/ATP requirement stochiometry, respectively\nΘ_J::AbstractFloat: Smoothing factor for J\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.C4ParaSet","page":"Photosynthesis","title":"Land.Photosynthesis.C4ParaSet","text":"mutable struct C4ParaSet{FT}\n\nParameter sets for C3 photosynthesis.\n\nFields\n\nKpT::Land.Photosynthesis.AbstractTDParameterSet{FT} where FT<:AbstractFloat: Kpep temperature dependency\nReT::Land.Photosynthesis.AbstractTDParameterSet{FT} where FT<:AbstractFloat: Respiration temperature dependency\nVcT::Land.Photosynthesis.AbstractTDParameterSet{FT} where FT<:AbstractFloat: Vcmax temperature dependency\nVpT::Land.Photosynthesis.AbstractTDParameterSet{FT} where FT<:AbstractFloat: Vpmax temperature dependency\nFlu::Land.Photosynthesis.AbstractFluoModelParaSet{FT} where FT<:AbstractFloat: Fluorescence model\nVR::AbstractFloat: Vcmax25 and respiration correlation\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Again, to guarantee a quick start, we provided a few pre-defined parameter     sets:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"C3Bernacchi\nC3CLM\nC4CLM","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.C3Bernacchi","page":"Photosynthesis","title":"Land.Photosynthesis.C3Bernacchi","text":"C3ParaSet type C3 photosynthesis using Bernacchi's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.C3CLM","page":"Photosynthesis","title":"Land.Photosynthesis.C3CLM","text":"C3ParaSet type C3 photosynthesis using CLM5's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.C4CLM","page":"Photosynthesis","title":"Land.Photosynthesis.C4CLM","text":"C4ParaSet type C4 photosynthesis using CLM5's data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Examples:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"FT = Float32;\nset_b = C3Bernacchi(FT);\nset_3 = C3CLM(FT);\nset_4 = C4CLM(FT);","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Note it here that the C3ParaSet and C4ParaSet structs are     mutable, and the fields can be changed to another non-mutable TD struct.     We'd like to mention that in some cases, leaf respiration rate is not     measured, and in this case, the dark respiration rate will be computed from     V_textcmax using a multiplier","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"VtoRCollatz\nVtoRDefault","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.VtoRCollatz","page":"Photosynthesis","title":"Land.Photosynthesis.VtoRCollatz","text":"A constant of 0.01 \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.VtoRDefault","page":"Photosynthesis","title":"Land.Photosynthesis.VtoRDefault","text":"A constant of 0.015 \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Temperature-Dependency","page":"Photosynthesis","title":"Temperature Dependency","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"As mentioned above, temperature corrections only need to be done once per     temperature change, and storing the temperature corrected values will     significantly boost the code speed. Here we provide a few functions to     change the stored values. First of all, all the temperature corrections are     made with temperature_correction:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"temperature_correction","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.temperature_correction","page":"Photosynthesis","title":"Land.Photosynthesis.temperature_correction","text":"temperature_correction(\n            td_set::AbstractTDParameterSet{FT},\n            T::FT\n) where {FT<:AbstractFloat}\n\nA correction factor based on arrhenius's fitting procedure, given\n\ntd_set ArrheniusTD or ArrheniusPeakTD type struct\nT Leaf temperature in [K]\n\nThe equation used for ArrheniusTD is\n\ncorr = exp left( dfracΔHaR T_0 - dfracΔHaR T_1 right)\n\nThe equations used for ArrheniusPeakTD are\n\ncorr = exp left( dfracΔHaR T_0 - dfracΔHaR T_1 right)\n       cdot\n       dfrac 1 + exp left( dfracS_v T_0 - H_dR T_0 right) \n               1 + exp left( dfracS_v T_1 - H_dR T_1 right) \n\nThe equation used for Q10TD is\n\ncorr = left( dfracT_1 - T_textREF10 right)^Q_10\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Second, depending on which physiological parameter to correct, some corrections     use the VAL_25 field in the ArrheniusTD, like K_textc,     K_texto, and K_textpep:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"photo_TD_from_set","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.photo_TD_from_set","page":"Photosynthesis","title":"Land.Photosynthesis.photo_TD_from_set","text":"photo_TD_from_set(td_set::ArrheniusTD{FT}, T::FT) where {FT<:AbstractFloat}\nphoto_TD_from_set(td_set::Q10TD{FT}, T::FT) where {FT<:AbstractFloat}\n\nMake temperature correction from parameter set, given\n\ntd_set ArrheniusTD type parameter set, which has a VAL_25 field\nT Leaf temperature\n\nUseful for Kc, Ko, Kpep, and Γ^*.\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Some corrections use the reference values from the Leaf struct, like     V_textcmax and J_textmax:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"photo_TD_from_val","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.photo_TD_from_val","page":"Photosynthesis","title":"Land.Photosynthesis.photo_TD_from_val","text":"photo_TD_from_val(\n            td_set::AbstractTDParameterSet{FT},\n            val::FT,\n            T::FT\n) where {FT<:AbstractFloat}\n\nMake temperature correction from a given value, given\n\ntd_set ArrheniusTD or ArrheniusPeakTD type struct\nval Uncorrected value at 298.15 K\nT Leaf temperature\n\nUseful for Vcmax, Vomax, Vpmax, Jmax, and Respiration.\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The functions to make temperature corrections to each individual variables are","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"leaf_jmax!\nleaf_kc!\nleaf_km!\nleaf_ko!\nleaf_kpep!\nleaf_rd!\nleaf_vcmax!\nleaf_vpmax!\nleaf_Γstar!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_jmax!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_jmax!","text":"leaf_jmax!(td_set::AbstractTDParameterSet{FT},\n           leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\n\nUpdate maximal electron transport rate at leaf temperature, given\n\ntd_set AbstractTDParameterSet type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_kc!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_kc!","text":"leaf_kc!(td_set::ArrheniusTD{FT}, leaf::Leaf{FT}) where {FT<:AbstractFloat}\n\nUpdate Kc at leaf temperature, given\n\ntd_set ArrheniusTD type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_km!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_km!","text":"leaf_km!(photo_set::C3ParaSet{FT},\n         leaf::Leaf{FT},\n         envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nUpdate Ko at leaf temperature, given\n\nphoto_set C3ParaSet type photosynthesis parameter set\nleaf Leaf type struct\nenvir AirLayer type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_ko!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_ko!","text":"leaf_ko!(td_set::ArrheniusTD{FT}, leaf::Leaf{FT}) where {FT<:AbstractFloat}\n\nUpdate Ko at leaf temperature, given\n\ntd_set ArrheniusTD type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_kpep!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_kpep!","text":"leaf_kpep!(td_set::ArrheniusTD{FT},\n           leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\n\nUpdate Kpep at leaf temperature, given\n\ntd_set ArrheniusTD type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_rd!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_rd!","text":"leaf_rd!(td_set::AbstractTDParameterSet{FT},\n         leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\n\nUpdate leaf dark respiration rate at leaf temperature, given\n\ntd_set AbstractTDParameterSet type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_vcmax!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_vcmax!","text":"leaf_vcmax!(td_set::AbstractTDParameterSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\n\nUpdate leaf maximal carboxylation rate at leaf temperature, given\n\ntd_set AbstractTDParameterSet type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_vpmax!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_vpmax!","text":"leaf_vpmax!(td_set::AbstractTDParameterSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\n\nUpdate leaf maximal PEP carboxylation rate at leaf temperature, given\n\ntd_set AbstractTDParameterSet type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_Γstar!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_Γstar!","text":"leaf_Γstar!(td_set::ArrheniusTD{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\n\nUpdate Γ^* at leaf temperature, given\n\ntd_set ArrheniusTD type TD parameter set\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Again to ease the coding, we provide a function to run all the temperature     dependencies:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"leaf_temperature_dependence!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_temperature_dependence!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_temperature_dependence!","text":"leaf_temperature_dependence!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\nleaf_temperature_dependence!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT},\n            T::FT\n) where {FT<:AbstractFloat}\n\nUpdate the temperature dependent photosynthesis only, given\n\nphoto_set AbstractPhotoModelParaSet type parameter set\nleaf Leaf type struct\nenvir AirLayer type struct\nT Given leaf temperature\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Note it here that function leaf_temperature_dependence! updates     saturated vapor pressure from leaf temperature as well.","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Example:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"FT = Float32;\nleaf = Leaf{FT}();\nenvir = AirLayer{FT}();\nset_3 = C3CLM(FT);\n\nleaf_temperature_dependence!(c3_set, leaf, envir);\nleaf_temperature_dependence!(c3_set, leaf, envir, FT(300));","category":"page"},{"location":"submodules/Photosynthesis/#RubisCO-limited-Photosynthesis","page":"Photosynthesis","title":"RubisCO-limited Photosynthesis","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"By default, Photosynthesis module computes gross photosynthetic rate as the     minimal of the three:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"A_textc RubisCO-limited photosynthetic rate\nA_textj Light-limited photosynthetic rate\nA_textp Product-limited photosynthetic rate","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"If leaf internal CO₂ is known, A_textc (gross rate) can be computed using","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"rubisco_limited_rate!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.rubisco_limited_rate!","page":"Photosynthesis","title":"Land.Photosynthesis.rubisco_limited_rate!","text":"rubisco_limited_rate!(\n            photo_set::Union{C3Cytochrome{FT},C3ParaSet{FT}},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\nrubisco_limited_rate!(\n            photo_set::C4ParaSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\nrubisco_limited_rate!(\n            photo_set::C3ParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nCalculate the RubisCO limited photosynthetic rate, given\n\nphoto_set C3ParaSet or C4ParaSet type struct\nleaf Leaf type struct\nenvir AirLayer type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"If total leaf diffusive conductance to CO₂ is known, A_textc can be     computed analytically by solving the quadratic function. The calculation is     done by adding an envir to the function parameter list. Note it here that     analytical solution using leaf diffusive conductance only applies to C3     photosynthesis as the RubisCO-limited rate for C4 plants is     V_textcmax.","category":"page"},{"location":"submodules/Photosynthesis/#Light-limited-Photosynthesis","page":"Photosynthesis","title":"Light-limited Photosynthesis","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"If leaf internal CO₂ is known, A_textj (gross rate) can be computed using","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"light_limited_rate!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.light_limited_rate!","page":"Photosynthesis","title":"Land.Photosynthesis.light_limited_rate!","text":"light_limited_rate!(\n            photo_set::Union{C3Cytochrome{FT},C3ParaSet{FT}},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\nlight_limited_rate!(\n            photo_set::C4ParaSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\nlight_limited_rate!(\n            photo_set::C3ParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nCalculate the light limited photosynthetic rate, given\n\nphoto_set C3ParaSet or C4ParaSet type struct\nleaf Leaf type struct\nenvir AirLayer type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"If total leaf diffusive conductance to CO₂ is known, A_textj can be     computed analytically using the same function by adding an envir to the     parameter list. Note that this analytical solution using leaf diffusive     conductance to CO2 only applies to C3 photosynthesis as the RubisCO-limited     rate for C4 plants is the electron transport rate.","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Be aware that leaf electron transport rate needs to be calculated before the     light-limited rate:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"leaf_ETR!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_ETR!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_ETR!","text":"leaf_ETR!(photo_set::C3Cytochrome{FT}, leaf::Leaf{FT}) where {FT<:AbstractFloat}\nleaf_ETR!(photo_set::C3ParaSet{FT}, leaf::Leaf{FT}) where {FT<:AbstractFloat}\nleaf_ETR!(photo_set::C4ParaSet{FT}, leaf::Leaf{FT}) where {FT<:AbstractFloat}\n\nUpdate the electron transport variables in the leaf struct, given\n\nphoto_set C3Cytochrome, C3ParaSet or C4ParaSet type struct\nleaf Leaf type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Product-limited-Photosynthesis","page":"Photosynthesis","title":"Product-limited Photosynthesis","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"If leaf internal CO₂ is known, A_textp (gross rate) can be computed using","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"product_limited_rate!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.product_limited_rate!","page":"Photosynthesis","title":"Land.Photosynthesis.product_limited_rate!","text":"product_limited_rate!(\n            photo_set::C3ParaSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\nproduct_limited_rate!(\n            photo_set::C4ParaSet{FT},\n            leaf::Leaf{FT}\n) where {FT<:AbstractFloat}\nproduct_limited_rate!(\n            photo_set::C4ParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT}\n) where {FT<:AbstractFloat}\n\nCalculate the product limited photosynthetic rate, given\n\nphoto_set C3ParaSet or C4ParaSet type struct\nleaf Leaf type struct\nenvir AirLayer type struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"If total leaf diffusive conductance to CO₂ is known, A_textp can be     computed analytically by adding an envir to the parameter list. Note it     here that the calculation using leaf diffusive conductance to CO2 only     applies to C4 photosynthesis as the RubisCO-limited rate for C4 plants is     V_textcmax/2.","category":"page"},{"location":"submodules/Photosynthesis/#Photosynthetic-Rates","page":"Photosynthesis","title":"Photosynthetic Rates","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"For empirical and optimization stomatal models, iterations are required to get     the final solution as in StomataModels module. In this case, more     conveniently computing photosynthetic rates for each leaf is preferable. In     this case, leaf_photosynthesis! is a better option:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"AbstractCalculationMode\nGCO₂Mode\nPCO₂Mode\nleaf_photosynthesis!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.AbstractCalculationMode","page":"Photosynthesis","title":"Land.Photosynthesis.AbstractCalculationMode","text":"abstract type AbstractCalculationMode\n\nHierarchy of AbstractCalculationMode\n\nGCO₂Mode\nPCO₂Mode\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.GCO₂Mode","page":"Photosynthesis","title":"Land.Photosynthesis.GCO₂Mode","text":"struct GCO₂Mode <: AbstractCalculationMode\n\nCalculate leaf photosynthesis using leaf internal CO₂ partial pressure\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.PCO₂Mode","page":"Photosynthesis","title":"Land.Photosynthesis.PCO₂Mode","text":"struct PCO₂Mode <: AbstractCalculationMode\n\nCalculate leaf photosynthesis using total leaf diffusive conductance to CO₂\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_photosynthesis!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_photosynthesis!","text":"leaf_photosynthesis!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT},\n            mode::PCO₂Mode\n) where {FT<:AbstractFloat}\nleaf_photosynthesis!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT},\n            mode::PCO₂Mode,\n            p_i::FT\n) where {FT<:AbstractFloat}\nleaf_photosynthesis!(\n            photo_set::C3ParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT},\n            mode::GCO₂Mode\n) where {FT<:AbstractFloat}\nleaf_photosynthesis!(\n            photo_set::C4ParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT},\n            mode::GCO₂Mode\n) where {FT<:AbstractFloat}\nleaf_photosynthesis!(\n            photo_set::AbstractPhotoModelParaSet{FT},\n            leaf::Leaf{FT},\n            envir::AirLayer{FT},\n            mode::GCO₂Mode,\n            g_lc::FT\n) where {FT<:AbstractFloat}\n\nCompute leaf photosynthetic rates, given\n\nphoto_set AbstractPhotoModelParaSet type parameter set\nleaf Leaf type struct\np_i Given leaf internal CO₂\nenvir AirLayer type struct\ng_lc Given leaf diffusive conductance to CO₂\n\nThe C3 photosynthesis model is from Farquhar et al. (1980) \"A biochemical model     of photosynthetic CO₂ assimilation in leaves of C3 species.\"\n\nThe C4 photosynthesis model is adapted from Collatz et al. (1992) \"Coupled     photosynthesis-stomatal conductance model for leaves of C4 plants.\"\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Fluorescence","page":"Photosynthesis","title":"Fluorescence","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Photosynthesis module also provide ways to compute leaf fluorescence. By     default, the modules uses fluorescence parameters from van del Tol et al.     (2014) with struct FluorescenceVanDerTol:","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"AbstractFluoModelParaSet\nFluoParaSet\nFluorescenceVanDerTol\nFluorescenceVanDerTolDrought","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.AbstractFluoModelParaSet","page":"Photosynthesis","title":"Land.Photosynthesis.AbstractFluoModelParaSet","text":"abstract type AbstractFluoModelParaSet{FT}\n\nHierarchy of the AbstractFluoModelParaSet:\n\nFluoParaSet\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.FluoParaSet","page":"Photosynthesis","title":"Land.Photosynthesis.FluoParaSet","text":"mutable struct FluoParaSet{FT}\n\nA AbstractFluoModelParaSet type paramter set.\n\nFields\n\nKr1::AbstractFloat: Fluorescence model coefficient\nKr2::AbstractFloat: Fluorescence model coefficient\nKr3::AbstractFloat: Fluorescence model coefficient\n\n\n\n\n\n","category":"type"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.FluorescenceVanDerTol","page":"Photosynthesis","title":"Land.Photosynthesis.FluorescenceVanDerTol","text":"FluoParaSet type parameter set using all data \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.FluorescenceVanDerTolDrought","page":"Photosynthesis","title":"Land.Photosynthesis.FluorescenceVanDerTolDrought","text":"FluoParaSet type parameter set using Flexas's data (drought) \n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"The function that is used to compute fluorescene is","category":"page"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"leaf_fluorescence!","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.leaf_fluorescence!","page":"Photosynthesis","title":"Land.Photosynthesis.leaf_fluorescence!","text":"leaf_fluorescence!(fluo_set::CytoFluoParaSet{FT}, leaf::Leaf{FT}) where {FT<:AbstractFloat}\nleaf_fluorescence!(fluo_set::FluoParaSet{FT}, leaf::Leaf{FT}) where {FT<:AbstractFloat}\n\nCompute fluorescence yield, Kr, Ks, and Kp for leaf, given\n\nfluo_set FluoParaSet type parameter set\nleaf Leaf struct\n\n\n\n\n\n","category":"function"},{"location":"submodules/Photosynthesis/#Misc","page":"Photosynthesis","title":"Misc","text":"","category":"section"},{"location":"submodules/Photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"C3Cytochrome","category":"page"},{"location":"submodules/Photosynthesis/#Land.Photosynthesis.C3Cytochrome","page":"Photosynthesis","title":"Land.Photosynthesis.C3Cytochrome","text":"mutable struct C3Cytochrome{FT}\n\nParameter sets for C3 photosynthesis with Cytochrome activity.\n\nFields\n\nEff_1::AbstractFloat: Coefficient 4.0/4.5 for NADPH/ATP requirement stochiometry, respectively\nEff_2::AbstractFloat: Coefficient 8.0/10.5 for NADPH/ATP requirement stochiometry, respectively\n\n\n\n\n\n","category":"type"}]
}
